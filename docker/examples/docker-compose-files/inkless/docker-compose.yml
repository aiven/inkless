services:
  broker: &base-broker
    image: aivenoy/kafka:4.1.0-inkless-SNAPSHOT
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "7070:7070" # prometheus metrics
      - "9999:9999" # jmx port
    environment: &base-broker-env
      CLUSTER_ID: "4L6g3nShT-eMCtK--X86sw"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 1
      # Add rack to the broker to simulate AZ placement
      # KAFKA_BROKER_RACK: "az1"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:29090,2@broker2:29090"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_LISTENERS: "CONTROLLER://:29090,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"

      # Inkless
      KAFKA_LOG_INKLESS_ENABLE: "true"
      KAFKA_INKLESS_CONSUME_CACHE_MAX_COUNT: "100"

      ## Control Plane
      ### Postgresql
      KAFKA_INKLESS_CONTROL_PLANE_CLASS: "io.aiven.inkless.control_plane.postgres.PostgresControlPlane"
      KAFKA_INKLESS_CONTROL_PLANE_CONNECTION_STRING: "jdbc:postgresql://postgres:5432/inkless"
      KAFKA_INKLESS_CONTROL_PLANE_USERNAME: "admin"
      KAFKA_INKLESS_CONTROL_PLANE_PASSWORD: "admin"

      ## In-memory control plane
      # KAFKA_INKLESS_CONTROL_PLANE_CLASS: "io.aiven.inkless.control_plane.InMemoryControlPlane"

      ### In-memory storage
      KAFKA_INKLESS_STORAGE_BACKEND_CLASS: "io.aiven.inkless.storage_backend.in_memory.InMemoryStorage"

      # JMX
      KAFKA_JMX_PORT: 9999
      KAFKA_HEAP_OPTS: "-Xmx2G -Xms2G"
      EXTRA_ARGS: -javaagent:/opt/prometheus-jmx-exporter/jmx_prometheus_javaagent.jar=7070:/opt/prometheus-jmx-exporter/kafka.yml
    volumes:
      - ./../../../extra/prometheus-jmx-exporter:/opt/prometheus-jmx-exporter:Z
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server broker:19092 --list"]
      interval: 5s
      timeout: 20s
      retries: 20
    depends_on:
      postgres:
        condition: service_healthy

  broker2:
    <<: *base-broker
    ports:
      - "9093:9093"
      - "17070:7070" # prometheus metrics
      - "19999:9999" # jmx port
    environment:
      <<: *base-broker-env
      KAFKA_NODE_ID: 2
      # Add rack to the broker to simulate AZ placement
      # KAFKA_BROKER_RACK: "az2"
      KAFKA_LISTENERS: "CONTROLLER://:29090,PLAINTEXT_HOST://:9093,PLAINTEXT://:19093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT_HOST://localhost:9093,PLAINTEXT://broker2:19093"

  # Postgresql for control plane
  postgres:
    image: postgres:17.2
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: "inkless"
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "admin"
    command: >
      postgres
      -c shared_preload_libraries='pg_stat_statements'
      -c pg_stat_statements.track='all'
    volumes:
      - ./../../../extra/postgres/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname=inkless -U admin"]
      interval: 5s
      timeout: 20s
      retries: 20