/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import io.aiven.inkless.control_plane.postgres.converters.OffsetDateTimeToInstantConverter;

import java.time.Instant;
import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.FileMergeWorkItemFiles.FileMergeWorkItemFilesPath;
import org.jooq.generated.tables.Files.FilesPath;
import org.jooq.generated.tables.records.FileMergeWorkItemsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FileMergeWorkItems extends TableImpl<FileMergeWorkItemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>file_merge_work_items</code>
     */
    public static final FileMergeWorkItems FILE_MERGE_WORK_ITEMS = new FileMergeWorkItems();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileMergeWorkItemsRecord> getRecordType() {
        return FileMergeWorkItemsRecord.class;
    }

    /**
     * The column <code>file_merge_work_items.work_item_id</code>.
     */
    public final TableField<FileMergeWorkItemsRecord, Long> WORK_ITEM_ID = createField(DSL.name("work_item_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>file_merge_work_items.created_at</code>.
     */
    public final TableField<FileMergeWorkItemsRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE, this, "", new OffsetDateTimeToInstantConverter());

    private FileMergeWorkItems(Name alias, Table<FileMergeWorkItemsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FileMergeWorkItems(Name alias, Table<FileMergeWorkItemsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>file_merge_work_items</code> table reference
     */
    public FileMergeWorkItems(String alias) {
        this(DSL.name(alias), FILE_MERGE_WORK_ITEMS);
    }

    /**
     * Create an aliased <code>file_merge_work_items</code> table reference
     */
    public FileMergeWorkItems(Name alias) {
        this(alias, FILE_MERGE_WORK_ITEMS);
    }

    /**
     * Create a <code>file_merge_work_items</code> table reference
     */
    public FileMergeWorkItems() {
        this(DSL.name("file_merge_work_items"), null);
    }

    public <O extends Record> FileMergeWorkItems(Table<O> path, ForeignKey<O, FileMergeWorkItemsRecord> childPath, InverseForeignKey<O, FileMergeWorkItemsRecord> parentPath) {
        super(path, childPath, parentPath, FILE_MERGE_WORK_ITEMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.19.17",
            "schema version:8"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class FileMergeWorkItemsPath extends FileMergeWorkItems implements Path<FileMergeWorkItemsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FileMergeWorkItemsPath(Table<O> path, ForeignKey<O, FileMergeWorkItemsRecord> childPath, InverseForeignKey<O, FileMergeWorkItemsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FileMergeWorkItemsPath(Name alias, Table<FileMergeWorkItemsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FileMergeWorkItemsPath as(String alias) {
            return new FileMergeWorkItemsPath(DSL.name(alias), this);
        }

        @Override
        public FileMergeWorkItemsPath as(Name alias) {
            return new FileMergeWorkItemsPath(alias, this);
        }

        @Override
        public FileMergeWorkItemsPath as(Table<?> alias) {
            return new FileMergeWorkItemsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<FileMergeWorkItemsRecord, Long> getIdentity() {
        return (Identity<FileMergeWorkItemsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FileMergeWorkItemsRecord> getPrimaryKey() {
        return Keys.FILE_MERGE_WORK_ITEMS_PKEY;
    }

    private transient FileMergeWorkItemFilesPath _fileMergeWorkItemFiles;

    /**
     * Get the implicit to-many join path to the
     * <code>public.file_merge_work_item_files</code> table
     */
    public FileMergeWorkItemFilesPath fileMergeWorkItemFiles() {
        if (_fileMergeWorkItemFiles == null)
            _fileMergeWorkItemFiles = new FileMergeWorkItemFilesPath(this, null, Keys.FILE_MERGE_WORK_ITEM_FILES__FILE_MERGE_WORK_ITEM_FILES_WORK_ITEM_ID_FKEY.getInverseKey());

        return _fileMergeWorkItemFiles;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.files</code>
     * table
     */
    public FilesPath files() {
        return fileMergeWorkItemFiles().files();
    }

    @Override
    public FileMergeWorkItems as(String alias) {
        return new FileMergeWorkItems(DSL.name(alias), this);
    }

    @Override
    public FileMergeWorkItems as(Name alias) {
        return new FileMergeWorkItems(alias, this);
    }

    @Override
    public FileMergeWorkItems as(Table<?> alias) {
        return new FileMergeWorkItems(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FileMergeWorkItems rename(String name) {
        return new FileMergeWorkItems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileMergeWorkItems rename(Name name) {
        return new FileMergeWorkItems(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileMergeWorkItems rename(Table<?> name) {
        return new FileMergeWorkItems(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileMergeWorkItems where(Condition condition) {
        return new FileMergeWorkItems(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileMergeWorkItems where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileMergeWorkItems where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileMergeWorkItems where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileMergeWorkItems where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileMergeWorkItems where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileMergeWorkItems where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileMergeWorkItems where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileMergeWorkItems whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileMergeWorkItems whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
