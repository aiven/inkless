/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.udt.records;


import javax.annotation.processing.Generated;

import org.apache.kafka.common.Uuid;
import org.apache.kafka.common.record.TimestampType;
import org.jooq.generated.udt.CommitBatchRequestV1;
import org.jooq.impl.UDTRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CommitBatchRequestV1Record extends UDTRecordImpl<CommitBatchRequestV1Record> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>commit_batch_request_v1.magic</code>.
     */
    public void setMagic(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>commit_batch_request_v1.magic</code>.
     */
    public Short getMagic() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>commit_batch_request_v1.topic_id</code>.
     */
    public void setTopicId(Uuid value) {
        set(1, value);
    }

    /**
     * Getter for <code>commit_batch_request_v1.topic_id</code>.
     */
    public Uuid getTopicId() {
        return (Uuid) get(1);
    }

    /**
     * Setter for <code>commit_batch_request_v1.partition</code>.
     */
    public void setPartition(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>commit_batch_request_v1.partition</code>.
     */
    public Integer getPartition() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>commit_batch_request_v1.byte_offset</code>.
     */
    public void setByteOffset(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>commit_batch_request_v1.byte_offset</code>.
     */
    public Long getByteOffset() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>commit_batch_request_v1.byte_size</code>.
     */
    public void setByteSize(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>commit_batch_request_v1.byte_size</code>.
     */
    public Long getByteSize() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>commit_batch_request_v1.base_offset</code>.
     */
    public void setBaseOffset(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>commit_batch_request_v1.base_offset</code>.
     */
    public Long getBaseOffset() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>commit_batch_request_v1.last_offset</code>.
     */
    public void setLastOffset(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>commit_batch_request_v1.last_offset</code>.
     */
    public Long getLastOffset() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>commit_batch_request_v1.timestamp_type</code>.
     */
    public void setTimestampType(TimestampType value) {
        set(7, value);
    }

    /**
     * Getter for <code>commit_batch_request_v1.timestamp_type</code>.
     */
    public TimestampType getTimestampType() {
        return (TimestampType) get(7);
    }

    /**
     * Setter for <code>commit_batch_request_v1.batch_max_timestamp</code>.
     */
    public void setBatchMaxTimestamp(Long value) {
        set(8, value);
    }

    /**
     * Getter for <code>commit_batch_request_v1.batch_max_timestamp</code>.
     */
    public Long getBatchMaxTimestamp() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>commit_batch_request_v1.producer_id</code>.
     */
    public void setProducerId(Long value) {
        set(9, value);
    }

    /**
     * Getter for <code>commit_batch_request_v1.producer_id</code>.
     */
    public Long getProducerId() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>commit_batch_request_v1.producer_epoch</code>.
     */
    public void setProducerEpoch(Short value) {
        set(10, value);
    }

    /**
     * Getter for <code>commit_batch_request_v1.producer_epoch</code>.
     */
    public Short getProducerEpoch() {
        return (Short) get(10);
    }

    /**
     * Setter for <code>commit_batch_request_v1.base_sequence</code>.
     */
    public void setBaseSequence(Integer value) {
        set(11, value);
    }

    /**
     * Getter for <code>commit_batch_request_v1.base_sequence</code>.
     */
    public Integer getBaseSequence() {
        return (Integer) get(11);
    }

    /**
     * Setter for <code>commit_batch_request_v1.last_sequence</code>.
     */
    public void setLastSequence(Integer value) {
        set(12, value);
    }

    /**
     * Getter for <code>commit_batch_request_v1.last_sequence</code>.
     */
    public Integer getLastSequence() {
        return (Integer) get(12);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommitBatchRequestV1Record
     */
    public CommitBatchRequestV1Record() {
        super(CommitBatchRequestV1.COMMIT_BATCH_REQUEST_V1);
    }

    /**
     * Create a detached, initialised CommitBatchRequestV1Record
     */
    public CommitBatchRequestV1Record(Short magic, Uuid topicId, Integer partition, Long byteOffset, Long byteSize, Long baseOffset, Long lastOffset, TimestampType timestampType, Long batchMaxTimestamp, Long producerId, Short producerEpoch, Integer baseSequence, Integer lastSequence) {
        super(CommitBatchRequestV1.COMMIT_BATCH_REQUEST_V1);

        setMagic(magic);
        setTopicId(topicId);
        setPartition(partition);
        setByteOffset(byteOffset);
        setByteSize(byteSize);
        setBaseOffset(baseOffset);
        setLastOffset(lastOffset);
        setTimestampType(timestampType);
        setBatchMaxTimestamp(batchMaxTimestamp);
        setProducerId(producerId);
        setProducerEpoch(producerEpoch);
        setBaseSequence(baseSequence);
        setLastSequence(lastSequence);
        resetChangedOnNotNull();
    }
}
