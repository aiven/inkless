/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.udt;


import io.aiven.inkless.control_plane.postgres.converters.UUIDtoUuidConverter;

import javax.annotation.processing.Generated;

import org.apache.kafka.common.Uuid;
import org.jooq.Schema;
import org.jooq.UDTField;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Domains;
import org.jooq.generated.enums.FindBatchesResponseErrorV1;
import org.jooq.generated.udt.records.BatchInfoV1Record;
import org.jooq.generated.udt.records.FindBatchesResponseV1Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.SchemaImpl;
import org.jooq.impl.UDTImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FindBatchesResponseV1 extends UDTImpl<FindBatchesResponseV1Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>find_batches_response_v1</code>
     */
    public static final FindBatchesResponseV1 FIND_BATCHES_RESPONSE_V1 = new FindBatchesResponseV1();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FindBatchesResponseV1Record> getRecordType() {
        return FindBatchesResponseV1Record.class;
    }

    /**
     * The attribute <code>find_batches_response_v1.topic_id</code>.
     */
    public static final UDTField<FindBatchesResponseV1Record, Uuid> TOPIC_ID = createField(DSL.name("topic_id"), SQLDataType.UUID.nullable(false), FIND_BATCHES_RESPONSE_V1, "", new UUIDtoUuidConverter());

    /**
     * The attribute <code>find_batches_response_v1.partition</code>.
     */
    public static final UDTField<FindBatchesResponseV1Record, Integer> PARTITION = createField(DSL.name("partition"), Domains.PARTITION_T.getDataType().nullable(false), FIND_BATCHES_RESPONSE_V1, "");

    /**
     * The attribute <code>find_batches_response_v1.log_start_offset</code>.
     */
    public static final UDTField<FindBatchesResponseV1Record, Long> LOG_START_OFFSET = createField(DSL.name("log_start_offset"), Domains.OFFSET_WITH_MINUS_ONE_T.getDataType(), FIND_BATCHES_RESPONSE_V1, "");

    /**
     * The attribute <code>find_batches_response_v1.high_watermark</code>.
     */
    public static final UDTField<FindBatchesResponseV1Record, Long> HIGH_WATERMARK = createField(DSL.name("high_watermark"), Domains.OFFSET_WITH_MINUS_ONE_T.getDataType(), FIND_BATCHES_RESPONSE_V1, "");

    /**
     * The attribute <code>find_batches_response_v1.batches</code>.
     */
    public static final UDTField<FindBatchesResponseV1Record, BatchInfoV1Record[]> BATCHES = createField(DSL.name("batches"), BatchInfoV1.BATCH_INFO_V1.getDataType().array(), FIND_BATCHES_RESPONSE_V1, "");

    /**
     * The attribute <code>find_batches_response_v1.error</code>.
     */
    public static final UDTField<FindBatchesResponseV1Record, FindBatchesResponseErrorV1> ERROR = createField(DSL.name("error"), SQLDataType.VARCHAR.asEnumDataType(FindBatchesResponseErrorV1.class), FIND_BATCHES_RESPONSE_V1, "");

    /**
     * No further instances allowed
     */
    private FindBatchesResponseV1() {
        super(DSL.name("find_batches_response_v1"), null, null, false);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA != null ? DefaultSchema.DEFAULT_SCHEMA : new SchemaImpl(DSL.name(""));
    }
}
