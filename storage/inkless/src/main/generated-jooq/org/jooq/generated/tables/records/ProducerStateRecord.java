/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import javax.annotation.processing.Generated;

import org.apache.kafka.common.Uuid;
import org.jooq.Record4;
import org.jooq.generated.tables.ProducerState;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProducerStateRecord extends UpdatableRecordImpl<ProducerStateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>producer_state.topic_id</code>.
     */
    public void setTopicId(Uuid value) {
        set(0, value);
    }

    /**
     * Getter for <code>producer_state.topic_id</code>.
     */
    public Uuid getTopicId() {
        return (Uuid) get(0);
    }

    /**
     * Setter for <code>producer_state.partition</code>.
     */
    public void setPartition(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>producer_state.partition</code>.
     */
    public Integer getPartition() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>producer_state.producer_id</code>.
     */
    public void setProducerId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>producer_state.producer_id</code>.
     */
    public Long getProducerId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>producer_state.row_id</code>.
     */
    public void setRowId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>producer_state.row_id</code>.
     */
    public Long getRowId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>producer_state.producer_epoch</code>.
     */
    public void setProducerEpoch(Short value) {
        set(4, value);
    }

    /**
     * Getter for <code>producer_state.producer_epoch</code>.
     */
    public Short getProducerEpoch() {
        return (Short) get(4);
    }

    /**
     * Setter for <code>producer_state.base_sequence</code>.
     */
    public void setBaseSequence(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>producer_state.base_sequence</code>.
     */
    public Integer getBaseSequence() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>producer_state.last_sequence</code>.
     */
    public void setLastSequence(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>producer_state.last_sequence</code>.
     */
    public Integer getLastSequence() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>producer_state.assigned_offset</code>.
     */
    public void setAssignedOffset(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>producer_state.assigned_offset</code>.
     */
    public Long getAssignedOffset() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>producer_state.batch_max_timestamp</code>.
     */
    public void setBatchMaxTimestamp(Long value) {
        set(8, value);
    }

    /**
     * Getter for <code>producer_state.batch_max_timestamp</code>.
     */
    public Long getBatchMaxTimestamp() {
        return (Long) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record4<Uuid, Integer, Long, Long> key() {
        return (Record4) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProducerStateRecord
     */
    public ProducerStateRecord() {
        super(ProducerState.PRODUCER_STATE);
    }

    /**
     * Create a detached, initialised ProducerStateRecord
     */
    public ProducerStateRecord(Uuid topicId, Integer partition, Long producerId, Long rowId, Short producerEpoch, Integer baseSequence, Integer lastSequence, Long assignedOffset, Long batchMaxTimestamp) {
        super(ProducerState.PRODUCER_STATE);

        setTopicId(topicId);
        setPartition(partition);
        setProducerId(producerId);
        setRowId(rowId);
        setProducerEpoch(producerEpoch);
        setBaseSequence(baseSequence);
        setLastSequence(lastSequence);
        setAssignedOffset(assignedOffset);
        setBatchMaxTimestamp(batchMaxTimestamp);
        resetChangedOnNotNull();
    }
}
