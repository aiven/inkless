/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import io.aiven.inkless.control_plane.postgres.converters.UUIDtoUuidConverter;

import java.util.Collection;

import javax.annotation.processing.Generated;

import org.apache.kafka.common.Uuid;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Domains;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.Batches.BatchesPath;
import org.jooq.generated.tables.records.LogsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Logs extends TableImpl<LogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>logs</code>
     */
    public static final Logs LOGS = new Logs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogsRecord> getRecordType() {
        return LogsRecord.class;
    }

    /**
     * The column <code>logs.topic_id</code>.
     */
    public final TableField<LogsRecord, Uuid> TOPIC_ID = createField(DSL.name("topic_id"), SQLDataType.UUID.nullable(false), this, "", new UUIDtoUuidConverter());

    /**
     * The column <code>logs.partition</code>.
     */
    public final TableField<LogsRecord, Integer> PARTITION = createField(DSL.name("partition"), Domains.PARTITION_T.getDataType().nullable(false), this, "");

    /**
     * The column <code>logs.topic_name</code>.
     */
    public final TableField<LogsRecord, String> TOPIC_NAME = createField(DSL.name("topic_name"), Domains.TOPIC_NAME_T.getDataType().nullable(false), this, "");

    /**
     * The column <code>logs.log_start_offset</code>.
     */
    public final TableField<LogsRecord, Long> LOG_START_OFFSET = createField(DSL.name("log_start_offset"), Domains.OFFSET_T.getDataType(), this, "");

    /**
     * The column <code>logs.high_watermark</code>.
     */
    public final TableField<LogsRecord, Long> HIGH_WATERMARK = createField(DSL.name("high_watermark"), Domains.OFFSET_T.getDataType(), this, "");

    /**
     * The column <code>logs.byte_size</code>.
     */
    public final TableField<LogsRecord, Long> BYTE_SIZE = createField(DSL.name("byte_size"), Domains.BYTE_SIZE_T.getDataType().nullable(false).defaultValue(DSL.field(DSL.raw("0"), Domains.BYTE_SIZE_T.getDataType())), this, "");

    private Logs(Name alias, Table<LogsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Logs(Name alias, Table<LogsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>logs</code> table reference
     */
    public Logs(String alias) {
        this(DSL.name(alias), LOGS);
    }

    /**
     * Create an aliased <code>logs</code> table reference
     */
    public Logs(Name alias) {
        this(alias, LOGS);
    }

    /**
     * Create a <code>logs</code> table reference
     */
    public Logs() {
        this(DSL.name("logs"), null);
    }

    public <O extends Record> Logs(Table<O> path, ForeignKey<O, LogsRecord> childPath, InverseForeignKey<O, LogsRecord> parentPath) {
        super(path, childPath, parentPath, LOGS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.19.17",
            "schema version:6"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class LogsPath extends Logs implements Path<LogsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LogsPath(Table<O> path, ForeignKey<O, LogsRecord> childPath, InverseForeignKey<O, LogsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LogsPath(Name alias, Table<LogsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LogsPath as(String alias) {
            return new LogsPath(DSL.name(alias), this);
        }

        @Override
        public LogsPath as(Name alias) {
            return new LogsPath(alias, this);
        }

        @Override
        public LogsPath as(Table<?> alias) {
            return new LogsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<LogsRecord> getPrimaryKey() {
        return Keys.LOGS_PKEY;
    }

    private transient BatchesPath _batches;

    /**
     * Get the implicit to-many join path to the <code>public.batches</code>
     * table
     */
    public BatchesPath batches() {
        if (_batches == null)
            _batches = new BatchesPath(this, null, Keys.BATCHES__FK_BATCHES_LOGS.getInverseKey());

        return _batches;
    }

    @Override
    public Logs as(String alias) {
        return new Logs(DSL.name(alias), this);
    }

    @Override
    public Logs as(Name alias) {
        return new Logs(alias, this);
    }

    @Override
    public Logs as(Table<?> alias) {
        return new Logs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Logs rename(String name) {
        return new Logs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Logs rename(Name name) {
        return new Logs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Logs rename(Table<?> name) {
        return new Logs(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Logs where(Condition condition) {
        return new Logs(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Logs where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Logs where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Logs where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Logs where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Logs where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Logs where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Logs where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Logs whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Logs whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
