/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.tables.records.ListOffsetsV1Record;
import org.jooq.generated.udt.ListOffsetsRequestV1;
import org.jooq.generated.udt.records.ListOffsetsRequestV1Record;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ListOffsetsV1 extends TableImpl<ListOffsetsV1Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>list_offsets_v1</code>
     */
    public static final ListOffsetsV1 LIST_OFFSETS_V1 = new ListOffsetsV1();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListOffsetsV1Record> getRecordType() {
        return ListOffsetsV1Record.class;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<ListOffsetsV1Record, Object> LIST_OFFSETS_V1_ = createField(DSL.name("list_offsets_v1"), DefaultDataType.getDefaultDataType("\"list_offsets_response_v1\""), this, "");

    private ListOffsetsV1(Name alias, Table<ListOffsetsV1Record> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, ListOffsetsRequestV1.LIST_OFFSETS_REQUEST_V1.getDataType().array())
        });
    }

    private ListOffsetsV1(Name alias, Table<ListOffsetsV1Record> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private ListOffsetsV1(Name alias, Table<ListOffsetsV1Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>list_offsets_v1</code> table reference
     */
    public ListOffsetsV1(String alias) {
        this(DSL.name(alias), LIST_OFFSETS_V1);
    }

    /**
     * Create an aliased <code>list_offsets_v1</code> table reference
     */
    public ListOffsetsV1(Name alias) {
        this(alias, LIST_OFFSETS_V1);
    }

    /**
     * Create a <code>list_offsets_v1</code> table reference
     */
    public ListOffsetsV1() {
        this(DSL.name("list_offsets_v1"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public ListOffsetsV1 as(String alias) {
        return new ListOffsetsV1(DSL.name(alias), this, parameters);
    }

    @Override
    public ListOffsetsV1 as(Name alias) {
        return new ListOffsetsV1(alias, this, parameters);
    }

    @Override
    public ListOffsetsV1 as(Table<?> alias) {
        return new ListOffsetsV1(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public ListOffsetsV1 rename(String name) {
        return new ListOffsetsV1(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public ListOffsetsV1 rename(Name name) {
        return new ListOffsetsV1(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public ListOffsetsV1 rename(Table<?> name) {
        return new ListOffsetsV1(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public ListOffsetsV1 call(
          ListOffsetsRequestV1Record[] argRequests
    ) {
        ListOffsetsV1 result = new ListOffsetsV1(DSL.name("list_offsets_v1"), null, new Field[] {
            DSL.val(argRequests, ListOffsetsRequestV1.LIST_OFFSETS_REQUEST_V1.getDataType().array())
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public ListOffsetsV1 call(
          Field<ListOffsetsRequestV1Record[]> argRequests
    ) {
        ListOffsetsV1 result = new ListOffsetsV1(DSL.name("list_offsets_v1"), null, new Field[] {
            argRequests
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
