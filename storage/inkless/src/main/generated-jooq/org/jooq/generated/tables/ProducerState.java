/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import io.aiven.inkless.control_plane.postgres.converters.UUIDtoUuidConverter;

import java.util.Collection;

import javax.annotation.processing.Generated;

import org.apache.kafka.common.Uuid;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Domains;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.ProducerStateRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProducerState extends TableImpl<ProducerStateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>producer_state</code>
     */
    public static final ProducerState PRODUCER_STATE = new ProducerState();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProducerStateRecord> getRecordType() {
        return ProducerStateRecord.class;
    }

    /**
     * The column <code>producer_state.topic_id</code>.
     */
    public final TableField<ProducerStateRecord, Uuid> TOPIC_ID = createField(DSL.name("topic_id"), SQLDataType.UUID.nullable(false), this, "", new UUIDtoUuidConverter());

    /**
     * The column <code>producer_state.partition</code>.
     */
    public final TableField<ProducerStateRecord, Integer> PARTITION = createField(DSL.name("partition"), Domains.PARTITION_T.getDataType().nullable(false), this, "");

    /**
     * The column <code>producer_state.producer_id</code>.
     */
    public final TableField<ProducerStateRecord, Long> PRODUCER_ID = createField(DSL.name("producer_id"), Domains.PRODUCER_ID_T.getDataType().nullable(false), this, "");

    /**
     * The column <code>producer_state.row_id</code>.
     */
    public final TableField<ProducerStateRecord, Long> ROW_ID = createField(DSL.name("row_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>producer_state.producer_epoch</code>.
     */
    public final TableField<ProducerStateRecord, Short> PRODUCER_EPOCH = createField(DSL.name("producer_epoch"), Domains.PRODUCER_EPOCH_T.getDataType().nullable(false), this, "");

    /**
     * The column <code>producer_state.base_sequence</code>.
     */
    public final TableField<ProducerStateRecord, Integer> BASE_SEQUENCE = createField(DSL.name("base_sequence"), Domains.SEQUENCE_T.getDataType().nullable(false), this, "");

    /**
     * The column <code>producer_state.last_sequence</code>.
     */
    public final TableField<ProducerStateRecord, Integer> LAST_SEQUENCE = createField(DSL.name("last_sequence"), Domains.SEQUENCE_T.getDataType().nullable(false), this, "");

    /**
     * The column <code>producer_state.assigned_offset</code>.
     */
    public final TableField<ProducerStateRecord, Long> ASSIGNED_OFFSET = createField(DSL.name("assigned_offset"), Domains.OFFSET_T.getDataType(), this, "");

    /**
     * The column <code>producer_state.batch_max_timestamp</code>.
     */
    public final TableField<ProducerStateRecord, Long> BATCH_MAX_TIMESTAMP = createField(DSL.name("batch_max_timestamp"), Domains.TIMESTAMP_T.getDataType().nullable(false), this, "");

    private ProducerState(Name alias, Table<ProducerStateRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProducerState(Name alias, Table<ProducerStateRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>producer_state</code> table reference
     */
    public ProducerState(String alias) {
        this(DSL.name(alias), PRODUCER_STATE);
    }

    /**
     * Create an aliased <code>producer_state</code> table reference
     */
    public ProducerState(Name alias) {
        this(alias, PRODUCER_STATE);
    }

    /**
     * Create a <code>producer_state</code> table reference
     */
    public ProducerState() {
        this(DSL.name("producer_state"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ProducerStateRecord, Long> getIdentity() {
        return (Identity<ProducerStateRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProducerStateRecord> getPrimaryKey() {
        return Keys.PRODUCER_STATE_PKEY;
    }

    @Override
    public ProducerState as(String alias) {
        return new ProducerState(DSL.name(alias), this);
    }

    @Override
    public ProducerState as(Name alias) {
        return new ProducerState(alias, this);
    }

    @Override
    public ProducerState as(Table<?> alias) {
        return new ProducerState(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProducerState rename(String name) {
        return new ProducerState(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProducerState rename(Name name) {
        return new ProducerState(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProducerState rename(Table<?> name) {
        return new ProducerState(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProducerState where(Condition condition) {
        return new ProducerState(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProducerState where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProducerState where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProducerState where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProducerState where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProducerState where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProducerState where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProducerState where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProducerState whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProducerState whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
