/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import javax.annotation.processing.Generated;

import org.apache.kafka.common.Uuid;
import org.apache.kafka.common.record.TimestampType;
import org.jooq.Record1;
import org.jooq.generated.tables.Batches;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchesRecord extends UpdatableRecordImpl<BatchesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>batches.batch_id</code>.
     */
    public void setBatchId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>batches.batch_id</code>.
     */
    public Long getBatchId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>batches.magic</code>.
     */
    public void setMagic(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>batches.magic</code>.
     */
    public Short getMagic() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>batches.topic_id</code>.
     */
    public void setTopicId(Uuid value) {
        set(2, value);
    }

    /**
     * Getter for <code>batches.topic_id</code>.
     */
    public Uuid getTopicId() {
        return (Uuid) get(2);
    }

    /**
     * Setter for <code>batches.partition</code>.
     */
    public void setPartition(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>batches.partition</code>.
     */
    public Integer getPartition() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>batches.base_offset</code>.
     */
    public void setBaseOffset(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>batches.base_offset</code>.
     */
    public Long getBaseOffset() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>batches.last_offset</code>.
     */
    public void setLastOffset(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>batches.last_offset</code>.
     */
    public Long getLastOffset() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>batches.file_id</code>.
     */
    public void setFileId(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>batches.file_id</code>.
     */
    public Long getFileId() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>batches.byte_offset</code>.
     */
    public void setByteOffset(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>batches.byte_offset</code>.
     */
    public Long getByteOffset() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>batches.byte_size</code>.
     */
    public void setByteSize(Long value) {
        set(8, value);
    }

    /**
     * Getter for <code>batches.byte_size</code>.
     */
    public Long getByteSize() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>batches.timestamp_type</code>.
     */
    public void setTimestampType(TimestampType value) {
        set(9, value);
    }

    /**
     * Getter for <code>batches.timestamp_type</code>.
     */
    public TimestampType getTimestampType() {
        return (TimestampType) get(9);
    }

    /**
     * Setter for <code>batches.log_append_timestamp</code>.
     */
    public void setLogAppendTimestamp(Long value) {
        set(10, value);
    }

    /**
     * Getter for <code>batches.log_append_timestamp</code>.
     */
    public Long getLogAppendTimestamp() {
        return (Long) get(10);
    }

    /**
     * Setter for <code>batches.batch_max_timestamp</code>.
     */
    public void setBatchMaxTimestamp(Long value) {
        set(11, value);
    }

    /**
     * Getter for <code>batches.batch_max_timestamp</code>.
     */
    public Long getBatchMaxTimestamp() {
        return (Long) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BatchesRecord
     */
    public BatchesRecord() {
        super(Batches.BATCHES);
    }

    /**
     * Create a detached, initialised BatchesRecord
     */
    public BatchesRecord(Long batchId, Short magic, Uuid topicId, Integer partition, Long baseOffset, Long lastOffset, Long fileId, Long byteOffset, Long byteSize, TimestampType timestampType, Long logAppendTimestamp, Long batchMaxTimestamp) {
        super(Batches.BATCHES);

        setBatchId(batchId);
        setMagic(magic);
        setTopicId(topicId);
        setPartition(partition);
        setBaseOffset(baseOffset);
        setLastOffset(lastOffset);
        setFileId(fileId);
        setByteOffset(byteOffset);
        setByteSize(byteSize);
        setTimestampType(timestampType);
        setLogAppendTimestamp(logAppendTimestamp);
        setBatchMaxTimestamp(batchMaxTimestamp);
        resetChangedOnNotNull();
    }
}
