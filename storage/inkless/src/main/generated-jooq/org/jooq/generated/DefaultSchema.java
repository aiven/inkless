/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated;


import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Catalog;
import org.jooq.Configuration;
import org.jooq.Domain;
import org.jooq.Field;
import org.jooq.Result;
import org.jooq.Table;
import org.jooq.UDT;
import org.jooq.generated.tables.Batches;
import org.jooq.generated.tables.CommitFileV1;
import org.jooq.generated.tables.DeleteRecordsV1;
import org.jooq.generated.tables.FileMergeWorkItemFiles;
import org.jooq.generated.tables.FileMergeWorkItems;
import org.jooq.generated.tables.Files;
import org.jooq.generated.tables.FilesToDelete;
import org.jooq.generated.tables.GetFileMergeWorkItemV1;
import org.jooq.generated.tables.ListOffsetsV1;
import org.jooq.generated.tables.Logs;
import org.jooq.generated.tables.records.CommitFileV1Record;
import org.jooq.generated.tables.records.DeleteRecordsV1Record;
import org.jooq.generated.tables.records.GetFileMergeWorkItemV1Record;
import org.jooq.generated.tables.records.ListOffsetsV1Record;
import org.jooq.generated.udt.BatchMetadataV1;
import org.jooq.generated.udt.CommitBatchRequestV1;
import org.jooq.generated.udt.CommitBatchResponseV1;
import org.jooq.generated.udt.CommitFileMergeWorkItemV1Batch;
import org.jooq.generated.udt.CommitFileMergeWorkItemV1Response;
import org.jooq.generated.udt.DeleteRecordsRequestV1;
import org.jooq.generated.udt.DeleteRecordsResponseV1;
import org.jooq.generated.udt.FileMergeWorkItemResponseV1;
import org.jooq.generated.udt.FileMergeWorkItemResponseV1Batch;
import org.jooq.generated.udt.FileMergeWorkItemResponseV1File;
import org.jooq.generated.udt.ListOffsetsRequestV1;
import org.jooq.generated.udt.ListOffsetsResponseV1;
import org.jooq.generated.udt.ReleaseFileMergeWorkItemV1Response;
import org.jooq.generated.udt.records.CommitBatchRequestV1Record;
import org.jooq.generated.udt.records.DeleteRecordsRequestV1Record;
import org.jooq.generated.udt.records.ListOffsetsRequestV1Record;
import org.jooq.impl.SchemaImpl;
import org.jooq.types.YearToSecond;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DefaultSchema extends SchemaImpl {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DEFAULT_SCHEMA</code>
     */
    public static final DefaultSchema DEFAULT_SCHEMA = new DefaultSchema();

    /**
     * The table <code>batches</code>.
     */
    public final Batches BATCHES = Batches.BATCHES;

    /**
     * The table <code>commit_file_v1</code>.
     */
    public final CommitFileV1 COMMIT_FILE_V1 = CommitFileV1.COMMIT_FILE_V1;

    /**
     * Call <code>commit_file_v1</code>.
     */
    public static Result<CommitFileV1Record> COMMIT_FILE_V1(
          Configuration configuration
        , String objectKey
        , Integer uploaderBrokerId
        , Long fileSize
        , Instant now
        , CommitBatchRequestV1Record[] requests
    ) {
        return configuration.dsl().selectFrom(org.jooq.generated.tables.CommitFileV1.COMMIT_FILE_V1.call(
              objectKey
            , uploaderBrokerId
            , fileSize
            , now
            , requests
        )).fetch();
    }

    /**
     * Get <code>commit_file_v1</code> as a table.
     */
    public static CommitFileV1 COMMIT_FILE_V1(
          String objectKey
        , Integer uploaderBrokerId
        , Long fileSize
        , Instant now
        , CommitBatchRequestV1Record[] requests
    ) {
        return org.jooq.generated.tables.CommitFileV1.COMMIT_FILE_V1.call(
            objectKey,
            uploaderBrokerId,
            fileSize,
            now,
            requests
        );
    }

    /**
     * Get <code>commit_file_v1</code> as a table.
     */
    public static CommitFileV1 COMMIT_FILE_V1(
          Field<String> objectKey
        , Field<Integer> uploaderBrokerId
        , Field<Long> fileSize
        , Field<Instant> now
        , Field<CommitBatchRequestV1Record[]> requests
    ) {
        return org.jooq.generated.tables.CommitFileV1.COMMIT_FILE_V1.call(
            objectKey,
            uploaderBrokerId,
            fileSize,
            now,
            requests
        );
    }

    /**
     * The table <code>delete_records_v1</code>.
     */
    public final DeleteRecordsV1 DELETE_RECORDS_V1 = DeleteRecordsV1.DELETE_RECORDS_V1;

    /**
     * Call <code>delete_records_v1</code>.
     */
    public static Result<DeleteRecordsV1Record> DELETE_RECORDS_V1(
          Configuration configuration
        , Instant now
        , DeleteRecordsRequestV1Record[] requests
    ) {
        return configuration.dsl().selectFrom(org.jooq.generated.tables.DeleteRecordsV1.DELETE_RECORDS_V1.call(
              now
            , requests
        )).fetch();
    }

    /**
     * Get <code>delete_records_v1</code> as a table.
     */
    public static DeleteRecordsV1 DELETE_RECORDS_V1(
          Instant now
        , DeleteRecordsRequestV1Record[] requests
    ) {
        return org.jooq.generated.tables.DeleteRecordsV1.DELETE_RECORDS_V1.call(
            now,
            requests
        );
    }

    /**
     * Get <code>delete_records_v1</code> as a table.
     */
    public static DeleteRecordsV1 DELETE_RECORDS_V1(
          Field<Instant> now
        , Field<DeleteRecordsRequestV1Record[]> requests
    ) {
        return org.jooq.generated.tables.DeleteRecordsV1.DELETE_RECORDS_V1.call(
            now,
            requests
        );
    }

    /**
     * The table <code>file_merge_work_item_files</code>.
     */
    public final FileMergeWorkItemFiles FILE_MERGE_WORK_ITEM_FILES = FileMergeWorkItemFiles.FILE_MERGE_WORK_ITEM_FILES;

    /**
     * The table <code>file_merge_work_items</code>.
     */
    public final FileMergeWorkItems FILE_MERGE_WORK_ITEMS = FileMergeWorkItems.FILE_MERGE_WORK_ITEMS;

    /**
     * The table <code>files</code>.
     */
    public final Files FILES = Files.FILES;

    /**
     * The table <code>files_to_delete</code>.
     */
    public final FilesToDelete FILES_TO_DELETE = FilesToDelete.FILES_TO_DELETE;

    /**
     * The table <code>get_file_merge_work_item_v1</code>.
     */
    public final GetFileMergeWorkItemV1 GET_FILE_MERGE_WORK_ITEM_V1 = GetFileMergeWorkItemV1.GET_FILE_MERGE_WORK_ITEM_V1;

    /**
     * Call <code>get_file_merge_work_item_v1</code>.
     */
    public static Result<GetFileMergeWorkItemV1Record> GET_FILE_MERGE_WORK_ITEM_V1(
          Configuration configuration
        , Instant now
        , YearToSecond expirationInterval
        , Long mergeFileSizeThreshold
    ) {
        return configuration.dsl().selectFrom(org.jooq.generated.tables.GetFileMergeWorkItemV1.GET_FILE_MERGE_WORK_ITEM_V1.call(
              now
            , expirationInterval
            , mergeFileSizeThreshold
        )).fetch();
    }

    /**
     * Get <code>get_file_merge_work_item_v1</code> as a table.
     */
    public static GetFileMergeWorkItemV1 GET_FILE_MERGE_WORK_ITEM_V1(
          Instant now
        , YearToSecond expirationInterval
        , Long mergeFileSizeThreshold
    ) {
        return org.jooq.generated.tables.GetFileMergeWorkItemV1.GET_FILE_MERGE_WORK_ITEM_V1.call(
            now,
            expirationInterval,
            mergeFileSizeThreshold
        );
    }

    /**
     * Get <code>get_file_merge_work_item_v1</code> as a table.
     */
    public static GetFileMergeWorkItemV1 GET_FILE_MERGE_WORK_ITEM_V1(
          Field<Instant> now
        , Field<YearToSecond> expirationInterval
        , Field<Long> mergeFileSizeThreshold
    ) {
        return org.jooq.generated.tables.GetFileMergeWorkItemV1.GET_FILE_MERGE_WORK_ITEM_V1.call(
            now,
            expirationInterval,
            mergeFileSizeThreshold
        );
    }

    /**
     * The table <code>list_offsets_v1</code>.
     */
    public final ListOffsetsV1 LIST_OFFSETS_V1 = ListOffsetsV1.LIST_OFFSETS_V1;

    /**
     * Call <code>list_offsets_v1</code>.
     */
    public static Result<ListOffsetsV1Record> LIST_OFFSETS_V1(
          Configuration configuration
        , ListOffsetsRequestV1Record[] requests
    ) {
        return configuration.dsl().selectFrom(org.jooq.generated.tables.ListOffsetsV1.LIST_OFFSETS_V1.call(
              requests
        )).fetch();
    }

    /**
     * Get <code>list_offsets_v1</code> as a table.
     */
    public static ListOffsetsV1 LIST_OFFSETS_V1(
          ListOffsetsRequestV1Record[] requests
    ) {
        return org.jooq.generated.tables.ListOffsetsV1.LIST_OFFSETS_V1.call(
            requests
        );
    }

    /**
     * Get <code>list_offsets_v1</code> as a table.
     */
    public static ListOffsetsV1 LIST_OFFSETS_V1(
          Field<ListOffsetsRequestV1Record[]> requests
    ) {
        return org.jooq.generated.tables.ListOffsetsV1.LIST_OFFSETS_V1.call(
            requests
        );
    }

    /**
     * The table <code>logs</code>.
     */
    public final Logs LOGS = Logs.LOGS;

    /**
     * No further instances allowed
     */
    private DefaultSchema() {
        super("", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Domain<?>> getDomains() {
        return Arrays.asList(
            Domains.BROKER_ID_T,
            Domains.BYTE_OFFSET_T,
            Domains.BYTE_SIZE_T,
            Domains.OBJECT_KEY_T,
            Domains.OFFSET_NULLABLE_T,
            Domains.OFFSET_T,
            Domains.OFFSET_WITH_MINUS_ONE_T,
            Domains.PARTITION_T,
            Domains.PRODUCER_EPOCH_T,
            Domains.PRODUCER_ID_T,
            Domains.SEQUENCE_T,
            Domains.TIMESTAMP_T,
            Domains.TIMESTAMP_TYPE_T,
            Domains.TOPIC_ID_T,
            Domains.TOPIC_NAME_T
        );
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.asList(
            Batches.BATCHES,
            CommitFileV1.COMMIT_FILE_V1,
            DeleteRecordsV1.DELETE_RECORDS_V1,
            FileMergeWorkItemFiles.FILE_MERGE_WORK_ITEM_FILES,
            FileMergeWorkItems.FILE_MERGE_WORK_ITEMS,
            Files.FILES,
            FilesToDelete.FILES_TO_DELETE,
            GetFileMergeWorkItemV1.GET_FILE_MERGE_WORK_ITEM_V1,
            ListOffsetsV1.LIST_OFFSETS_V1,
            Logs.LOGS
        );
    }

    @Override
    public final List<UDT<?>> getUDTs() {
        return Arrays.asList(
            BatchMetadataV1.BATCH_METADATA_V1,
            CommitBatchRequestV1.COMMIT_BATCH_REQUEST_V1,
            CommitBatchResponseV1.COMMIT_BATCH_RESPONSE_V1,
            CommitFileMergeWorkItemV1Batch.COMMIT_FILE_MERGE_WORK_ITEM_V1_BATCH,
            CommitFileMergeWorkItemV1Response.COMMIT_FILE_MERGE_WORK_ITEM_V1_RESPONSE,
            DeleteRecordsRequestV1.DELETE_RECORDS_REQUEST_V1,
            DeleteRecordsResponseV1.DELETE_RECORDS_RESPONSE_V1,
            FileMergeWorkItemResponseV1.FILE_MERGE_WORK_ITEM_RESPONSE_V1,
            FileMergeWorkItemResponseV1Batch.FILE_MERGE_WORK_ITEM_RESPONSE_V1_BATCH,
            FileMergeWorkItemResponseV1File.FILE_MERGE_WORK_ITEM_RESPONSE_V1_FILE,
            ListOffsetsRequestV1.LIST_OFFSETS_REQUEST_V1,
            ListOffsetsResponseV1.LIST_OFFSETS_RESPONSE_V1,
            ReleaseFileMergeWorkItemV1Response.RELEASE_FILE_MERGE_WORK_ITEM_V1_RESPONSE
        );
    }
}
