/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.udt.paths;


import io.aiven.inkless.control_plane.postgres.converters.UUIDtoUuidConverter;

import javax.annotation.processing.Generated;

import org.apache.kafka.common.Uuid;
import org.jooq.Binding;
import org.jooq.Comment;
import org.jooq.DataType;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.RecordQualifier;
import org.jooq.UDTField;
import org.jooq.generated.Domains;
import org.jooq.generated.enums.CommitBatchResponseV1Error;
import org.jooq.generated.udt.CommitBatchResponseV1;
import org.jooq.generated.udt.records.CommitBatchResponseV1Record;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.UDTPathTableFieldImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommitBatchResponseV1Path<R extends Record, T> extends UDTPathTableFieldImpl<R, CommitBatchResponseV1Record, T> {

    private static final long serialVersionUID = 1L;

    /**
     * The attribute <code>commit_batch_response_v1.topic_id</code>.
     */
    public final UDTField<CommitBatchResponseV1Record, Uuid> TOPIC_ID = Internal.createUDTPathField(DSL.name("topic_id"), SQLDataType.UUID.nullable(false), this, "", UDTField.class, new UUIDtoUuidConverter());

    /**
     * The attribute <code>commit_batch_response_v1.partition</code>.
     */
    public final UDTField<CommitBatchResponseV1Record, Integer> PARTITION = Internal.createUDTPathField(DSL.name("partition"), Domains.PARTITION_T.getDataType().nullable(false), this, "", UDTField.class);

    /**
     * The attribute <code>commit_batch_response_v1.log_start_offset</code>.
     */
    public final UDTField<CommitBatchResponseV1Record, Long> LOG_START_OFFSET = Internal.createUDTPathField(DSL.name("log_start_offset"), Domains.OFFSET_NULLABLE_T.getDataType(), this, "", UDTField.class);

    /**
     * The attribute <code>commit_batch_response_v1.assigned_base_offset</code>.
     */
    public final UDTField<CommitBatchResponseV1Record, Long> ASSIGNED_BASE_OFFSET = Internal.createUDTPathField(DSL.name("assigned_base_offset"), Domains.OFFSET_NULLABLE_T.getDataType(), this, "", UDTField.class);

    /**
     * The attribute <code>commit_batch_response_v1.batch_timestamp</code>.
     */
    public final UDTField<CommitBatchResponseV1Record, Long> BATCH_TIMESTAMP = Internal.createUDTPathField(DSL.name("batch_timestamp"), Domains.TIMESTAMP_T.getDataType().nullable(false), this, "", UDTField.class);

    /**
     * The attribute <code>commit_batch_response_v1.error</code>.
     */
    public final UDTField<CommitBatchResponseV1Record, CommitBatchResponseV1Error> ERROR = Internal.createUDTPathField(DSL.name("error"), SQLDataType.VARCHAR.asEnumDataType(CommitBatchResponseV1Error.class), this, "", UDTField.class);

    public CommitBatchResponseV1Path(Name name, DataType<T> type, RecordQualifier<R> qualifier, Comment comment, Binding<?, T> binding) {
        super(name, type, qualifier, CommitBatchResponseV1.COMMIT_BATCH_RESPONSE_V1, comment, binding);
    }
}
