/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import io.aiven.inkless.control_plane.postgres.converters.ShortToTimestampTypeConverter;
import io.aiven.inkless.control_plane.postgres.converters.UUIDtoUuidConverter;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.apache.kafka.common.Uuid;
import org.apache.kafka.common.record.TimestampType;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Domains;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.Files.FilesPath;
import org.jooq.generated.tables.Logs.LogsPath;
import org.jooq.generated.tables.records.BatchesRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Batches extends TableImpl<BatchesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>batches</code>
     */
    public static final Batches BATCHES = new Batches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchesRecord> getRecordType() {
        return BatchesRecord.class;
    }

    /**
     * The column <code>batches.batch_id</code>.
     */
    public final TableField<BatchesRecord, Long> BATCH_ID = createField(DSL.name("batch_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>batches.magic</code>.
     */
    public final TableField<BatchesRecord, Short> MAGIC = createField(DSL.name("magic"), Domains.MAGIC_T.getDataType().nullable(false), this, "");

    /**
     * The column <code>batches.topic_id</code>.
     */
    public final TableField<BatchesRecord, Uuid> TOPIC_ID = createField(DSL.name("topic_id"), SQLDataType.UUID.nullable(false), this, "", new UUIDtoUuidConverter());

    /**
     * The column <code>batches.partition</code>.
     */
    public final TableField<BatchesRecord, Integer> PARTITION = createField(DSL.name("partition"), Domains.PARTITION_T.getDataType().nullable(false), this, "");

    /**
     * The column <code>batches.base_offset</code>.
     */
    public final TableField<BatchesRecord, Long> BASE_OFFSET = createField(DSL.name("base_offset"), Domains.OFFSET_T.getDataType(), this, "");

    /**
     * The column <code>batches.last_offset</code>.
     */
    public final TableField<BatchesRecord, Long> LAST_OFFSET = createField(DSL.name("last_offset"), Domains.OFFSET_T.getDataType(), this, "");

    /**
     * The column <code>batches.file_id</code>.
     */
    public final TableField<BatchesRecord, Long> FILE_ID = createField(DSL.name("file_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>batches.byte_offset</code>.
     */
    public final TableField<BatchesRecord, Long> BYTE_OFFSET = createField(DSL.name("byte_offset"), Domains.BYTE_OFFSET_T.getDataType().nullable(false), this, "");

    /**
     * The column <code>batches.byte_size</code>.
     */
    public final TableField<BatchesRecord, Long> BYTE_SIZE = createField(DSL.name("byte_size"), Domains.BYTE_SIZE_T.getDataType().nullable(false), this, "");

    /**
     * The column <code>batches.timestamp_type</code>.
     */
    public final TableField<BatchesRecord, TimestampType> TIMESTAMP_TYPE = createField(DSL.name("timestamp_type"), Domains.TIMESTAMP_TYPE_T.getDataType().nullable(false), this, "", new ShortToTimestampTypeConverter());

    /**
     * The column <code>batches.log_append_timestamp</code>.
     */
    public final TableField<BatchesRecord, Long> LOG_APPEND_TIMESTAMP = createField(DSL.name("log_append_timestamp"), Domains.TIMESTAMP_T.getDataType().nullable(false), this, "");

    /**
     * The column <code>batches.batch_max_timestamp</code>.
     */
    public final TableField<BatchesRecord, Long> BATCH_MAX_TIMESTAMP = createField(DSL.name("batch_max_timestamp"), Domains.TIMESTAMP_T.getDataType().nullable(false), this, "");

    private Batches(Name alias, Table<BatchesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Batches(Name alias, Table<BatchesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>batches</code> table reference
     */
    public Batches(String alias) {
        this(DSL.name(alias), BATCHES);
    }

    /**
     * Create an aliased <code>batches</code> table reference
     */
    public Batches(Name alias) {
        this(alias, BATCHES);
    }

    /**
     * Create a <code>batches</code> table reference
     */
    public Batches() {
        this(DSL.name("batches"), null);
    }

    public <O extends Record> Batches(Table<O> path, ForeignKey<O, BatchesRecord> childPath, InverseForeignKey<O, BatchesRecord> parentPath) {
        super(path, childPath, parentPath, BATCHES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.19.17",
            "schema version:6"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class BatchesPath extends Batches implements Path<BatchesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BatchesPath(Table<O> path, ForeignKey<O, BatchesRecord> childPath, InverseForeignKey<O, BatchesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BatchesPath(Name alias, Table<BatchesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BatchesPath as(String alias) {
            return new BatchesPath(DSL.name(alias), this);
        }

        @Override
        public BatchesPath as(Name alias) {
            return new BatchesPath(alias, this);
        }

        @Override
        public BatchesPath as(Table<?> alias) {
            return new BatchesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BATCHES_BY_FILE, Indexes.BATCHES_BY_LAST_OFFSET_IDX);
    }

    @Override
    public Identity<BatchesRecord, Long> getIdentity() {
        return (Identity<BatchesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BatchesRecord> getPrimaryKey() {
        return Keys.BATCHES_PKEY;
    }

    @Override
    public List<ForeignKey<BatchesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BATCHES__FK_BATCHES_FILES, Keys.BATCHES__FK_BATCHES_LOGS);
    }

    private transient FilesPath _files;

    /**
     * Get the implicit join path to the <code>public.files</code> table.
     */
    public FilesPath files() {
        if (_files == null)
            _files = new FilesPath(this, Keys.BATCHES__FK_BATCHES_FILES, null);

        return _files;
    }

    private transient LogsPath _logs;

    /**
     * Get the implicit join path to the <code>public.logs</code> table.
     */
    public LogsPath logs() {
        if (_logs == null)
            _logs = new LogsPath(this, Keys.BATCHES__FK_BATCHES_LOGS, null);

        return _logs;
    }

    @Override
    public Batches as(String alias) {
        return new Batches(DSL.name(alias), this);
    }

    @Override
    public Batches as(Name alias) {
        return new Batches(alias, this);
    }

    @Override
    public Batches as(Table<?> alias) {
        return new Batches(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Batches rename(String name) {
        return new Batches(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Batches rename(Name name) {
        return new Batches(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Batches rename(Table<?> name) {
        return new Batches(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Batches where(Condition condition) {
        return new Batches(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Batches where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Batches where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Batches where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Batches where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Batches where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Batches where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Batches where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Batches whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Batches whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
