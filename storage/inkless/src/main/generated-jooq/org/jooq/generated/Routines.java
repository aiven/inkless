/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated;


import java.time.Instant;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.Result;
import org.jooq.generated.routines.BatchTimestamp;
import org.jooq.generated.routines.CommitFileMergeWorkItemV1;
import org.jooq.generated.routines.DeleteBatchV1;
import org.jooq.generated.routines.DeleteFilesV1;
import org.jooq.generated.routines.DeleteTopicV1;
import org.jooq.generated.routines.MarkFileToDeleteV1;
import org.jooq.generated.routines.ReleaseFileMergeWorkItemV1;
import org.jooq.generated.tables.CommitFileV1;
import org.jooq.generated.tables.DeleteRecordsV1;
import org.jooq.generated.tables.EnforceRetentionV1;
import org.jooq.generated.tables.GetFileMergeWorkItemV1;
import org.jooq.generated.tables.ListOffsetsV1;
import org.jooq.generated.tables.records.CommitFileV1Record;
import org.jooq.generated.tables.records.DeleteRecordsV1Record;
import org.jooq.generated.tables.records.EnforceRetentionV1Record;
import org.jooq.generated.tables.records.GetFileMergeWorkItemV1Record;
import org.jooq.generated.tables.records.ListOffsetsV1Record;
import org.jooq.generated.udt.records.CommitBatchRequestV1Record;
import org.jooq.generated.udt.records.CommitFileMergeWorkItemBatchV1Record;
import org.jooq.generated.udt.records.CommitFileMergeWorkItemResponseV1Record;
import org.jooq.generated.udt.records.DeleteRecordsRequestV1Record;
import org.jooq.generated.udt.records.EnforceRetentionRequestV1Record;
import org.jooq.generated.udt.records.ListOffsetsRequestV1Record;
import org.jooq.generated.udt.records.ReleaseFileMergeWorkItemResponseV1Record;
import org.jooq.types.YearToSecond;


/**
 * Convenience access to all stored procedures and functions in the default
 * schema.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Routines {

    /**
     * Call <code>batch_timestamp</code>
     */
    public static Long batchTimestamp(
          Configuration configuration
        , Short argTimestampType
        , Long argBatchMaxTimestamp
        , Long argLogAppendTimestamp
    ) {
        BatchTimestamp f = new BatchTimestamp();
        f.setArgTimestampType(argTimestampType);
        f.setArgBatchMaxTimestamp(argBatchMaxTimestamp);
        f.setArgLogAppendTimestamp(argLogAppendTimestamp);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>batch_timestamp</code> as a field.
     */
    public static Field<Long> batchTimestamp(
          Short argTimestampType
        , Long argBatchMaxTimestamp
        , Long argLogAppendTimestamp
    ) {
        BatchTimestamp f = new BatchTimestamp();
        f.setArgTimestampType(argTimestampType);
        f.setArgBatchMaxTimestamp(argBatchMaxTimestamp);
        f.setArgLogAppendTimestamp(argLogAppendTimestamp);

        return f.asField();
    }

    /**
     * Get <code>batch_timestamp</code> as a field.
     */
    public static Field<Long> batchTimestamp(
          Field<Short> argTimestampType
        , Field<Long> argBatchMaxTimestamp
        , Field<Long> argLogAppendTimestamp
    ) {
        BatchTimestamp f = new BatchTimestamp();
        f.setArgTimestampType(argTimestampType);
        f.setArgBatchMaxTimestamp(argBatchMaxTimestamp);
        f.setArgLogAppendTimestamp(argLogAppendTimestamp);

        return f.asField();
    }

    /**
     * Call <code>commit_file_merge_work_item_v1</code>
     */
    public static CommitFileMergeWorkItemResponseV1Record commitFileMergeWorkItemV1(
          Configuration configuration
        , Instant argNow
        , Long argExistingWorkItemId
        , String argObjectKey
        , Short argFormat
        , Integer argUploaderBrokerId
        , Long argFileSize
        , CommitFileMergeWorkItemBatchV1Record[] argMergeFileBatches
    ) {
        CommitFileMergeWorkItemV1 f = new CommitFileMergeWorkItemV1();
        f.setArgNow(argNow);
        f.setArgExistingWorkItemId(argExistingWorkItemId);
        f.setArgObjectKey(argObjectKey);
        f.setArgFormat(argFormat);
        f.setArgUploaderBrokerId(argUploaderBrokerId);
        f.setArgFileSize(argFileSize);
        f.setArgMergeFileBatches(argMergeFileBatches);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>commit_file_merge_work_item_v1</code> as a field.
     */
    public static Field<CommitFileMergeWorkItemResponseV1Record> commitFileMergeWorkItemV1(
          Instant argNow
        , Long argExistingWorkItemId
        , String argObjectKey
        , Short argFormat
        , Integer argUploaderBrokerId
        , Long argFileSize
        , CommitFileMergeWorkItemBatchV1Record[] argMergeFileBatches
    ) {
        CommitFileMergeWorkItemV1 f = new CommitFileMergeWorkItemV1();
        f.setArgNow(argNow);
        f.setArgExistingWorkItemId(argExistingWorkItemId);
        f.setArgObjectKey(argObjectKey);
        f.setArgFormat(argFormat);
        f.setArgUploaderBrokerId(argUploaderBrokerId);
        f.setArgFileSize(argFileSize);
        f.setArgMergeFileBatches(argMergeFileBatches);

        return f.asField();
    }

    /**
     * Get <code>commit_file_merge_work_item_v1</code> as a field.
     */
    public static Field<CommitFileMergeWorkItemResponseV1Record> commitFileMergeWorkItemV1(
          Field<Instant> argNow
        , Field<Long> argExistingWorkItemId
        , Field<String> argObjectKey
        , Field<Short> argFormat
        , Field<Integer> argUploaderBrokerId
        , Field<Long> argFileSize
        , Field<CommitFileMergeWorkItemBatchV1Record[]> argMergeFileBatches
    ) {
        CommitFileMergeWorkItemV1 f = new CommitFileMergeWorkItemV1();
        f.setArgNow(argNow);
        f.setArgExistingWorkItemId(argExistingWorkItemId);
        f.setArgObjectKey(argObjectKey);
        f.setArgFormat(argFormat);
        f.setArgUploaderBrokerId(argUploaderBrokerId);
        f.setArgFileSize(argFileSize);
        f.setArgMergeFileBatches(argMergeFileBatches);

        return f.asField();
    }

    /**
     * Call <code>delete_batch_v1</code>
     */
    public static void deleteBatchV1(
          Configuration configuration
        , Instant argNow
        , Long argBatchId
    ) {
        DeleteBatchV1 p = new DeleteBatchV1();
        p.setArgNow(argNow);
        p.setArgBatchId(argBatchId);

        p.execute(configuration);
    }

    /**
     * Call <code>delete_files_v1</code>
     */
    public static void deleteFilesV1(
          Configuration configuration
        , String[] argPaths
    ) {
        DeleteFilesV1 p = new DeleteFilesV1();
        p.setArgPaths(argPaths);

        p.execute(configuration);
    }

    /**
     * Call <code>delete_topic_v1</code>
     */
    public static void deleteTopicV1(
          Configuration configuration
        , Instant argNow
        , UUID[] argTopicIds
    ) {
        DeleteTopicV1 p = new DeleteTopicV1();
        p.setArgNow(argNow);
        p.setArgTopicIds(argTopicIds);

        p.execute(configuration);
    }

    /**
     * Call <code>mark_file_to_delete_v1</code>
     */
    public static void markFileToDeleteV1(
          Configuration configuration
        , Instant argNow
        , Long argFileId
    ) {
        MarkFileToDeleteV1 p = new MarkFileToDeleteV1();
        p.setArgNow(argNow);
        p.setArgFileId(argFileId);

        p.execute(configuration);
    }

    /**
     * Call <code>release_file_merge_work_item_v1</code>
     */
    public static ReleaseFileMergeWorkItemResponseV1Record releaseFileMergeWorkItemV1(
          Configuration configuration
        , Long argExistingWorkItemId
    ) {
        ReleaseFileMergeWorkItemV1 f = new ReleaseFileMergeWorkItemV1();
        f.setArgExistingWorkItemId(argExistingWorkItemId);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>release_file_merge_work_item_v1</code> as a field.
     */
    public static Field<ReleaseFileMergeWorkItemResponseV1Record> releaseFileMergeWorkItemV1(
          Long argExistingWorkItemId
    ) {
        ReleaseFileMergeWorkItemV1 f = new ReleaseFileMergeWorkItemV1();
        f.setArgExistingWorkItemId(argExistingWorkItemId);

        return f.asField();
    }

    /**
     * Get <code>release_file_merge_work_item_v1</code> as a field.
     */
    public static Field<ReleaseFileMergeWorkItemResponseV1Record> releaseFileMergeWorkItemV1(
          Field<Long> argExistingWorkItemId
    ) {
        ReleaseFileMergeWorkItemV1 f = new ReleaseFileMergeWorkItemV1();
        f.setArgExistingWorkItemId(argExistingWorkItemId);

        return f.asField();
    }

    /**
     * Call <code>commit_file_v1</code>.
     */
    public static Result<CommitFileV1Record> commitFileV1(
          Configuration configuration
        , String argObjectKey
        , Short argFormat
        , Integer argUploaderBrokerId
        , Long argFileSize
        , Instant argNow
        , CommitBatchRequestV1Record[] argRequests
    ) {
        return configuration.dsl().selectFrom(org.jooq.generated.tables.CommitFileV1.COMMIT_FILE_V1.call(
              argObjectKey
            , argFormat
            , argUploaderBrokerId
            , argFileSize
            , argNow
            , argRequests
        )).fetch();
    }

    /**
     * Get <code>commit_file_v1</code> as a table.
     */
    public static CommitFileV1 commitFileV1(
          String argObjectKey
        , Short argFormat
        , Integer argUploaderBrokerId
        , Long argFileSize
        , Instant argNow
        , CommitBatchRequestV1Record[] argRequests
    ) {
        return org.jooq.generated.tables.CommitFileV1.COMMIT_FILE_V1.call(
            argObjectKey,
            argFormat,
            argUploaderBrokerId,
            argFileSize,
            argNow,
            argRequests
        );
    }

    /**
     * Get <code>commit_file_v1</code> as a table.
     */
    public static CommitFileV1 commitFileV1(
          Field<String> argObjectKey
        , Field<Short> argFormat
        , Field<Integer> argUploaderBrokerId
        , Field<Long> argFileSize
        , Field<Instant> argNow
        , Field<CommitBatchRequestV1Record[]> argRequests
    ) {
        return org.jooq.generated.tables.CommitFileV1.COMMIT_FILE_V1.call(
            argObjectKey,
            argFormat,
            argUploaderBrokerId,
            argFileSize,
            argNow,
            argRequests
        );
    }

    /**
     * Call <code>delete_records_v1</code>.
     */
    public static Result<DeleteRecordsV1Record> deleteRecordsV1(
          Configuration configuration
        , Instant argNow
        , DeleteRecordsRequestV1Record[] argRequests
    ) {
        return configuration.dsl().selectFrom(org.jooq.generated.tables.DeleteRecordsV1.DELETE_RECORDS_V1.call(
              argNow
            , argRequests
        )).fetch();
    }

    /**
     * Get <code>delete_records_v1</code> as a table.
     */
    public static DeleteRecordsV1 deleteRecordsV1(
          Instant argNow
        , DeleteRecordsRequestV1Record[] argRequests
    ) {
        return org.jooq.generated.tables.DeleteRecordsV1.DELETE_RECORDS_V1.call(
            argNow,
            argRequests
        );
    }

    /**
     * Get <code>delete_records_v1</code> as a table.
     */
    public static DeleteRecordsV1 deleteRecordsV1(
          Field<Instant> argNow
        , Field<DeleteRecordsRequestV1Record[]> argRequests
    ) {
        return org.jooq.generated.tables.DeleteRecordsV1.DELETE_RECORDS_V1.call(
            argNow,
            argRequests
        );
    }

    /**
     * Call <code>enforce_retention_v1</code>.
     */
    public static Result<EnforceRetentionV1Record> enforceRetentionV1(
          Configuration configuration
        , Instant argNow
        , EnforceRetentionRequestV1Record[] argRequests
    ) {
        return configuration.dsl().selectFrom(org.jooq.generated.tables.EnforceRetentionV1.ENFORCE_RETENTION_V1.call(
              argNow
            , argRequests
        )).fetch();
    }

    /**
     * Get <code>enforce_retention_v1</code> as a table.
     */
    public static EnforceRetentionV1 enforceRetentionV1(
          Instant argNow
        , EnforceRetentionRequestV1Record[] argRequests
    ) {
        return org.jooq.generated.tables.EnforceRetentionV1.ENFORCE_RETENTION_V1.call(
            argNow,
            argRequests
        );
    }

    /**
     * Get <code>enforce_retention_v1</code> as a table.
     */
    public static EnforceRetentionV1 enforceRetentionV1(
          Field<Instant> argNow
        , Field<EnforceRetentionRequestV1Record[]> argRequests
    ) {
        return org.jooq.generated.tables.EnforceRetentionV1.ENFORCE_RETENTION_V1.call(
            argNow,
            argRequests
        );
    }

    /**
     * Call <code>get_file_merge_work_item_v1</code>.
     */
    public static Result<GetFileMergeWorkItemV1Record> getFileMergeWorkItemV1(
          Configuration configuration
        , Instant argNow
        , YearToSecond argExpirationInterval
        , Long argMergeFileSizeThreshold
    ) {
        return configuration.dsl().selectFrom(org.jooq.generated.tables.GetFileMergeWorkItemV1.GET_FILE_MERGE_WORK_ITEM_V1.call(
              argNow
            , argExpirationInterval
            , argMergeFileSizeThreshold
        )).fetch();
    }

    /**
     * Get <code>get_file_merge_work_item_v1</code> as a table.
     */
    public static GetFileMergeWorkItemV1 getFileMergeWorkItemV1(
          Instant argNow
        , YearToSecond argExpirationInterval
        , Long argMergeFileSizeThreshold
    ) {
        return org.jooq.generated.tables.GetFileMergeWorkItemV1.GET_FILE_MERGE_WORK_ITEM_V1.call(
            argNow,
            argExpirationInterval,
            argMergeFileSizeThreshold
        );
    }

    /**
     * Get <code>get_file_merge_work_item_v1</code> as a table.
     */
    public static GetFileMergeWorkItemV1 getFileMergeWorkItemV1(
          Field<Instant> argNow
        , Field<YearToSecond> argExpirationInterval
        , Field<Long> argMergeFileSizeThreshold
    ) {
        return org.jooq.generated.tables.GetFileMergeWorkItemV1.GET_FILE_MERGE_WORK_ITEM_V1.call(
            argNow,
            argExpirationInterval,
            argMergeFileSizeThreshold
        );
    }

    /**
     * Call <code>list_offsets_v1</code>.
     */
    public static Result<ListOffsetsV1Record> listOffsetsV1(
          Configuration configuration
        , ListOffsetsRequestV1Record[] argRequests
    ) {
        return configuration.dsl().selectFrom(org.jooq.generated.tables.ListOffsetsV1.LIST_OFFSETS_V1.call(
              argRequests
        )).fetch();
    }

    /**
     * Get <code>list_offsets_v1</code> as a table.
     */
    public static ListOffsetsV1 listOffsetsV1(
          ListOffsetsRequestV1Record[] argRequests
    ) {
        return org.jooq.generated.tables.ListOffsetsV1.LIST_OFFSETS_V1.call(
            argRequests
        );
    }

    /**
     * Get <code>list_offsets_v1</code> as a table.
     */
    public static ListOffsetsV1 listOffsetsV1(
          Field<ListOffsetsRequestV1Record[]> argRequests
    ) {
        return org.jooq.generated.tables.ListOffsetsV1.LIST_OFFSETS_V1.call(
            argRequests
        );
    }
}
