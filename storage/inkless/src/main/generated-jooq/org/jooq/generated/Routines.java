/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated;


import java.time.Instant;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.apache.kafka.common.record.TimestampType;
import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.Result;
import org.jooq.generated.routines.BatchTimestamp;
import org.jooq.generated.routines.CommitFileMergeWorkItemV1;
import org.jooq.generated.routines.DeleteBatchV1;
import org.jooq.generated.routines.DeleteFilesV1;
import org.jooq.generated.routines.DeleteTopicV1;
import org.jooq.generated.routines.MarkFileToDeleteV1;
import org.jooq.generated.routines.ReleaseFileMergeWorkItemV1;
import org.jooq.generated.tables.CommitFileV1;
import org.jooq.generated.tables.DeleteRecordsV1;
import org.jooq.generated.tables.GetFileMergeWorkItemV1;
import org.jooq.generated.tables.ListOffsetsV1;
import org.jooq.generated.tables.records.CommitFileV1Record;
import org.jooq.generated.tables.records.DeleteRecordsV1Record;
import org.jooq.generated.tables.records.GetFileMergeWorkItemV1Record;
import org.jooq.generated.tables.records.ListOffsetsV1Record;
import org.jooq.generated.udt.records.CommitBatchRequestV1Record;
import org.jooq.generated.udt.records.CommitFileMergeWorkItemV1BatchRecord;
import org.jooq.generated.udt.records.CommitFileMergeWorkItemV1ResponseRecord;
import org.jooq.generated.udt.records.DeleteRecordsRequestV1Record;
import org.jooq.generated.udt.records.ListOffsetsRequestV1Record;
import org.jooq.generated.udt.records.ReleaseFileMergeWorkItemV1ResponseRecord;
import org.jooq.types.YearToSecond;


/**
 * Convenience access to all stored procedures and functions in the default
 * schema.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Routines {

    /**
     * Call <code>batch_timestamp</code>
     */
    public static Long batchTimestamp(
          Configuration configuration
        , TimestampType timestampType
        , Long batchMaxTimestamp
        , Long logAppendTimestamp
    ) {
        BatchTimestamp f = new BatchTimestamp();
        f.setTimestampType(timestampType);
        f.setBatchMaxTimestamp(batchMaxTimestamp);
        f.setLogAppendTimestamp(logAppendTimestamp);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>batch_timestamp</code> as a field.
     */
    public static Field<Long> batchTimestamp(
          TimestampType timestampType
        , Long batchMaxTimestamp
        , Long logAppendTimestamp
    ) {
        BatchTimestamp f = new BatchTimestamp();
        f.setTimestampType(timestampType);
        f.setBatchMaxTimestamp(batchMaxTimestamp);
        f.setLogAppendTimestamp(logAppendTimestamp);

        return f.asField();
    }

    /**
     * Get <code>batch_timestamp</code> as a field.
     */
    public static Field<Long> batchTimestamp(
          Field<TimestampType> timestampType
        , Field<Long> batchMaxTimestamp
        , Field<Long> logAppendTimestamp
    ) {
        BatchTimestamp f = new BatchTimestamp();
        f.setTimestampType(timestampType);
        f.setBatchMaxTimestamp(batchMaxTimestamp);
        f.setLogAppendTimestamp(logAppendTimestamp);

        return f.asField();
    }

    /**
     * Call <code>commit_file_merge_work_item_v1</code>
     */
    public static CommitFileMergeWorkItemV1ResponseRecord commitFileMergeWorkItemV1(
          Configuration configuration
        , Instant now
        , Long existingWorkItemId
        , String objectKey
        , Short format
        , Integer uploaderBrokerId
        , Long fileSize
        , CommitFileMergeWorkItemV1BatchRecord[] mergeFileBatches
    ) {
        CommitFileMergeWorkItemV1 f = new CommitFileMergeWorkItemV1();
        f.setNow(now);
        f.setExistingWorkItemId(existingWorkItemId);
        f.setObjectKey(objectKey);
        f.setFormat(format);
        f.setUploaderBrokerId(uploaderBrokerId);
        f.setFileSize(fileSize);
        f.setMergeFileBatches(mergeFileBatches);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>commit_file_merge_work_item_v1</code> as a field.
     */
    public static Field<CommitFileMergeWorkItemV1ResponseRecord> commitFileMergeWorkItemV1(
          Instant now
        , Long existingWorkItemId
        , String objectKey
        , Short format
        , Integer uploaderBrokerId
        , Long fileSize
        , CommitFileMergeWorkItemV1BatchRecord[] mergeFileBatches
    ) {
        CommitFileMergeWorkItemV1 f = new CommitFileMergeWorkItemV1();
        f.setNow(now);
        f.setExistingWorkItemId(existingWorkItemId);
        f.setObjectKey(objectKey);
        f.setFormat(format);
        f.setUploaderBrokerId(uploaderBrokerId);
        f.setFileSize(fileSize);
        f.setMergeFileBatches(mergeFileBatches);

        return f.asField();
    }

    /**
     * Get <code>commit_file_merge_work_item_v1</code> as a field.
     */
    public static Field<CommitFileMergeWorkItemV1ResponseRecord> commitFileMergeWorkItemV1(
          Field<Instant> now
        , Field<Long> existingWorkItemId
        , Field<String> objectKey
        , Field<Short> format
        , Field<Integer> uploaderBrokerId
        , Field<Long> fileSize
        , Field<CommitFileMergeWorkItemV1BatchRecord[]> mergeFileBatches
    ) {
        CommitFileMergeWorkItemV1 f = new CommitFileMergeWorkItemV1();
        f.setNow(now);
        f.setExistingWorkItemId(existingWorkItemId);
        f.setObjectKey(objectKey);
        f.setFormat(format);
        f.setUploaderBrokerId(uploaderBrokerId);
        f.setFileSize(fileSize);
        f.setMergeFileBatches(mergeFileBatches);

        return f.asField();
    }

    /**
     * Call <code>delete_batch_v1</code>
     */
    public static void deleteBatchV1(
          Configuration configuration
        , Instant now
        , UUID argTopicId
        , Integer argPartition
        , Long argBaseOffset
    ) {
        DeleteBatchV1 p = new DeleteBatchV1();
        p.setNow(now);
        p.setArgTopicId(argTopicId);
        p.setArgPartition(argPartition);
        p.setArgBaseOffset(argBaseOffset);

        p.execute(configuration);
    }

    /**
     * Call <code>delete_files_v1</code>
     */
    public static void deleteFilesV1(
          Configuration configuration
        , String[] paths
    ) {
        DeleteFilesV1 p = new DeleteFilesV1();
        p.setPaths(paths);

        p.execute(configuration);
    }

    /**
     * Call <code>delete_topic_v1</code>
     */
    public static void deleteTopicV1(
          Configuration configuration
        , Instant now
        , UUID[] argTopicIds
    ) {
        DeleteTopicV1 p = new DeleteTopicV1();
        p.setNow(now);
        p.setArgTopicIds(argTopicIds);

        p.execute(configuration);
    }

    /**
     * Call <code>mark_file_to_delete_v1</code>
     */
    public static void markFileToDeleteV1(
          Configuration configuration
        , Instant now
        , Long argFileId
    ) {
        MarkFileToDeleteV1 p = new MarkFileToDeleteV1();
        p.setNow(now);
        p.setArgFileId(argFileId);

        p.execute(configuration);
    }

    /**
     * Call <code>release_file_merge_work_item_v1</code>
     */
    public static ReleaseFileMergeWorkItemV1ResponseRecord releaseFileMergeWorkItemV1(
          Configuration configuration
        , Long existingWorkItemId
    ) {
        ReleaseFileMergeWorkItemV1 f = new ReleaseFileMergeWorkItemV1();
        f.setExistingWorkItemId(existingWorkItemId);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>release_file_merge_work_item_v1</code> as a field.
     */
    public static Field<ReleaseFileMergeWorkItemV1ResponseRecord> releaseFileMergeWorkItemV1(
          Long existingWorkItemId
    ) {
        ReleaseFileMergeWorkItemV1 f = new ReleaseFileMergeWorkItemV1();
        f.setExistingWorkItemId(existingWorkItemId);

        return f.asField();
    }

    /**
     * Get <code>release_file_merge_work_item_v1</code> as a field.
     */
    public static Field<ReleaseFileMergeWorkItemV1ResponseRecord> releaseFileMergeWorkItemV1(
          Field<Long> existingWorkItemId
    ) {
        ReleaseFileMergeWorkItemV1 f = new ReleaseFileMergeWorkItemV1();
        f.setExistingWorkItemId(existingWorkItemId);

        return f.asField();
    }

    /**
     * Call <code>commit_file_v1</code>.
     */
    public static Result<CommitFileV1Record> commitFileV1(
          Configuration configuration
        , String objectKey
        , Short format
        , Integer uploaderBrokerId
        , Long fileSize
        , Instant now
        , CommitBatchRequestV1Record[] requests
    ) {
        return configuration.dsl().selectFrom(org.jooq.generated.tables.CommitFileV1.COMMIT_FILE_V1.call(
              objectKey
            , format
            , uploaderBrokerId
            , fileSize
            , now
            , requests
        )).fetch();
    }

    /**
     * Get <code>commit_file_v1</code> as a table.
     */
    public static CommitFileV1 commitFileV1(
          String objectKey
        , Short format
        , Integer uploaderBrokerId
        , Long fileSize
        , Instant now
        , CommitBatchRequestV1Record[] requests
    ) {
        return org.jooq.generated.tables.CommitFileV1.COMMIT_FILE_V1.call(
            objectKey,
            format,
            uploaderBrokerId,
            fileSize,
            now,
            requests
        );
    }

    /**
     * Get <code>commit_file_v1</code> as a table.
     */
    public static CommitFileV1 commitFileV1(
          Field<String> objectKey
        , Field<Short> format
        , Field<Integer> uploaderBrokerId
        , Field<Long> fileSize
        , Field<Instant> now
        , Field<CommitBatchRequestV1Record[]> requests
    ) {
        return org.jooq.generated.tables.CommitFileV1.COMMIT_FILE_V1.call(
            objectKey,
            format,
            uploaderBrokerId,
            fileSize,
            now,
            requests
        );
    }

    /**
     * Call <code>delete_records_v1</code>.
     */
    public static Result<DeleteRecordsV1Record> deleteRecordsV1(
          Configuration configuration
        , Instant now
        , DeleteRecordsRequestV1Record[] requests
    ) {
        return configuration.dsl().selectFrom(org.jooq.generated.tables.DeleteRecordsV1.DELETE_RECORDS_V1.call(
              now
            , requests
        )).fetch();
    }

    /**
     * Get <code>delete_records_v1</code> as a table.
     */
    public static DeleteRecordsV1 deleteRecordsV1(
          Instant now
        , DeleteRecordsRequestV1Record[] requests
    ) {
        return org.jooq.generated.tables.DeleteRecordsV1.DELETE_RECORDS_V1.call(
            now,
            requests
        );
    }

    /**
     * Get <code>delete_records_v1</code> as a table.
     */
    public static DeleteRecordsV1 deleteRecordsV1(
          Field<Instant> now
        , Field<DeleteRecordsRequestV1Record[]> requests
    ) {
        return org.jooq.generated.tables.DeleteRecordsV1.DELETE_RECORDS_V1.call(
            now,
            requests
        );
    }

    /**
     * Call <code>get_file_merge_work_item_v1</code>.
     */
    public static Result<GetFileMergeWorkItemV1Record> getFileMergeWorkItemV1(
          Configuration configuration
        , Instant now
        , YearToSecond expirationInterval
        , Long mergeFileSizeThreshold
    ) {
        return configuration.dsl().selectFrom(org.jooq.generated.tables.GetFileMergeWorkItemV1.GET_FILE_MERGE_WORK_ITEM_V1.call(
              now
            , expirationInterval
            , mergeFileSizeThreshold
        )).fetch();
    }

    /**
     * Get <code>get_file_merge_work_item_v1</code> as a table.
     */
    public static GetFileMergeWorkItemV1 getFileMergeWorkItemV1(
          Instant now
        , YearToSecond expirationInterval
        , Long mergeFileSizeThreshold
    ) {
        return org.jooq.generated.tables.GetFileMergeWorkItemV1.GET_FILE_MERGE_WORK_ITEM_V1.call(
            now,
            expirationInterval,
            mergeFileSizeThreshold
        );
    }

    /**
     * Get <code>get_file_merge_work_item_v1</code> as a table.
     */
    public static GetFileMergeWorkItemV1 getFileMergeWorkItemV1(
          Field<Instant> now
        , Field<YearToSecond> expirationInterval
        , Field<Long> mergeFileSizeThreshold
    ) {
        return org.jooq.generated.tables.GetFileMergeWorkItemV1.GET_FILE_MERGE_WORK_ITEM_V1.call(
            now,
            expirationInterval,
            mergeFileSizeThreshold
        );
    }

    /**
     * Call <code>list_offsets_v1</code>.
     */
    public static Result<ListOffsetsV1Record> listOffsetsV1(
          Configuration configuration
        , ListOffsetsRequestV1Record[] requests
    ) {
        return configuration.dsl().selectFrom(org.jooq.generated.tables.ListOffsetsV1.LIST_OFFSETS_V1.call(
              requests
        )).fetch();
    }

    /**
     * Get <code>list_offsets_v1</code> as a table.
     */
    public static ListOffsetsV1 listOffsetsV1(
          ListOffsetsRequestV1Record[] requests
    ) {
        return org.jooq.generated.tables.ListOffsetsV1.LIST_OFFSETS_V1.call(
            requests
        );
    }

    /**
     * Get <code>list_offsets_v1</code> as a table.
     */
    public static ListOffsetsV1 listOffsetsV1(
          Field<ListOffsetsRequestV1Record[]> requests
    ) {
        return org.jooq.generated.tables.ListOffsetsV1.LIST_OFFSETS_V1.call(
            requests
        );
    }
}
