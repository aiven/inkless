/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import io.aiven.inkless.control_plane.FileReason;
import io.aiven.inkless.control_plane.postgres.converters.FileReasonTToFileReasonConverter;
import io.aiven.inkless.control_plane.postgres.converters.OffsetDateTimeToInstantConverter;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Domains;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.enums.FileReasonT;
import org.jooq.generated.enums.FileStateT;
import org.jooq.generated.tables.Batches.BatchesPath;
import org.jooq.generated.tables.FileMergeWorkItemFiles.FileMergeWorkItemFilesPath;
import org.jooq.generated.tables.FileMergeWorkItems.FileMergeWorkItemsPath;
import org.jooq.generated.tables.records.FilesRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Files extends TableImpl<FilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>files</code>
     */
    public static final Files FILES = new Files();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilesRecord> getRecordType() {
        return FilesRecord.class;
    }

    /**
     * The column <code>files.file_id</code>.
     */
    public final TableField<FilesRecord, Long> FILE_ID = createField(DSL.name("file_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>files.object_key</code>.
     */
    public final TableField<FilesRecord, String> OBJECT_KEY = createField(DSL.name("object_key"), Domains.OBJECT_KEY_T.getDataType().nullable(false), this, "");

    /**
     * The column <code>files.format</code>.
     */
    public final TableField<FilesRecord, Short> FORMAT = createField(DSL.name("format"), Domains.FORMAT_T.getDataType().nullable(false), this, "");

    /**
     * The column <code>files.reason</code>.
     */
    public final TableField<FilesRecord, FileReason> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(FileReasonT.class), this, "", new FileReasonTToFileReasonConverter());

    /**
     * The column <code>files.state</code>.
     */
    public final TableField<FilesRecord, FileStateT> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(FileStateT.class), this, "");

    /**
     * The column <code>files.uploader_broker_id</code>.
     */
    public final TableField<FilesRecord, Integer> UPLOADER_BROKER_ID = createField(DSL.name("uploader_broker_id"), Domains.BROKER_ID_T.getDataType().nullable(false), this, "");

    /**
     * The column <code>files.committed_at</code>.
     */
    public final TableField<FilesRecord, Instant> COMMITTED_AT = createField(DSL.name("committed_at"), SQLDataType.TIMESTAMPWITHTIMEZONE, this, "", new OffsetDateTimeToInstantConverter());

    /**
     * The column <code>files.marked_for_deletion_at</code>.
     */
    public final TableField<FilesRecord, Instant> MARKED_FOR_DELETION_AT = createField(DSL.name("marked_for_deletion_at"), SQLDataType.TIMESTAMPWITHTIMEZONE, this, "", new OffsetDateTimeToInstantConverter());

    /**
     * The column <code>files.size</code>.
     */
    public final TableField<FilesRecord, Long> SIZE = createField(DSL.name("size"), Domains.BYTE_SIZE_T.getDataType().nullable(false), this, "");

    private Files(Name alias, Table<FilesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Files(Name alias, Table<FilesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>files</code> table reference
     */
    public Files(String alias) {
        this(DSL.name(alias), FILES);
    }

    /**
     * Create an aliased <code>files</code> table reference
     */
    public Files(Name alias) {
        this(alias, FILES);
    }

    /**
     * Create a <code>files</code> table reference
     */
    public Files() {
        this(DSL.name("files"), null);
    }

    public <O extends Record> Files(Table<O> path, ForeignKey<O, FilesRecord> childPath, InverseForeignKey<O, FilesRecord> parentPath) {
        super(path, childPath, parentPath, FILES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.19.17",
            "schema version:1"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class FilesPath extends Files implements Path<FilesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FilesPath(Table<O> path, ForeignKey<O, FilesRecord> childPath, InverseForeignKey<O, FilesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FilesPath(Name alias, Table<FilesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FilesPath as(String alias) {
            return new FilesPath(DSL.name(alias), this);
        }

        @Override
        public FilesPath as(Name alias) {
            return new FilesPath(alias, this);
        }

        @Override
        public FilesPath as(Table<?> alias) {
            return new FilesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FILES_BY_STATE_ONLY_DELETING_IDX);
    }

    @Override
    public Identity<FilesRecord, Long> getIdentity() {
        return (Identity<FilesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FilesRecord> getPrimaryKey() {
        return Keys.FILES_PKEY;
    }

    @Override
    public List<UniqueKey<FilesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.FILES_OBJECT_KEY_KEY);
    }

    private transient FileMergeWorkItemFilesPath _fileMergeWorkItemFiles;

    /**
     * Get the implicit to-many join path to the
     * <code>public.file_merge_work_item_files</code> table
     */
    public FileMergeWorkItemFilesPath fileMergeWorkItemFiles() {
        if (_fileMergeWorkItemFiles == null)
            _fileMergeWorkItemFiles = new FileMergeWorkItemFilesPath(this, null, Keys.FILE_MERGE_WORK_ITEM_FILES__FILE_MERGE_WORK_ITEM_FILES_FILE_ID_FKEY.getInverseKey());

        return _fileMergeWorkItemFiles;
    }

    private transient BatchesPath _batches;

    /**
     * Get the implicit to-many join path to the <code>public.batches</code>
     * table
     */
    public BatchesPath batches() {
        if (_batches == null)
            _batches = new BatchesPath(this, null, Keys.BATCHES__FK_BATCHES_FILES.getInverseKey());

        return _batches;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.file_merge_work_items</code> table
     */
    public FileMergeWorkItemsPath fileMergeWorkItems() {
        return fileMergeWorkItemFiles().fileMergeWorkItems();
    }

    @Override
    public Files as(String alias) {
        return new Files(DSL.name(alias), this);
    }

    @Override
    public Files as(Name alias) {
        return new Files(alias, this);
    }

    @Override
    public Files as(Table<?> alias) {
        return new Files(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Files rename(String name) {
        return new Files(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Files rename(Name name) {
        return new Files(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Files rename(Table<?> name) {
        return new Files(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Files where(Condition condition) {
        return new Files(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Files where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Files where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Files where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Files where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Files where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Files where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Files where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Files whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Files whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
