/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated;


import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Domain;
import org.jooq.Schema;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.LazySchema;
import org.jooq.impl.SQLDataType;


/**
 * Convenience access to all Domains in the default schema.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Domains {

    /**
     * The domain <code>broker_id_t</code>.
     */
    public static final Domain<Integer> BROKER_ID_T = Internal.createDomain(
          schema()
        , DSL.name("broker_id_t")
        , SQLDataType.INTEGER.nullable(false)
    );

    /**
     * The domain <code>byte_offset_t</code>.
     */
    public static final Domain<Long> BYTE_OFFSET_T = Internal.createDomain(
          schema()
        , DSL.name("byte_offset_t")
        , SQLDataType.BIGINT.nullable(false)
        , Internal.createCheck(null, null, "CHECK ((VALUE >= 0))")
    );

    /**
     * The domain <code>byte_size_t</code>.
     */
    public static final Domain<Long> BYTE_SIZE_T = Internal.createDomain(
          schema()
        , DSL.name("byte_size_t")
        , SQLDataType.BIGINT.nullable(false)
        , Internal.createCheck(null, null, "CHECK ((VALUE >= 0))")
    );

    /**
     * The domain <code>format_t</code>.
     */
    public static final Domain<Short> FORMAT_T = Internal.createDomain(
          schema()
        , DSL.name("format_t")
        , SQLDataType.SMALLINT.nullable(false)
        , Internal.createCheck(null, null, "CHECK (((VALUE >= 1) AND (VALUE <= 3)))")
    );

    /**
     * The domain <code>magic_t</code>.
     */
    public static final Domain<Short> MAGIC_T = Internal.createDomain(
          schema()
        , DSL.name("magic_t")
        , SQLDataType.SMALLINT.nullable(false)
        , Internal.createCheck(null, null, "CHECK (((VALUE >= 0) AND (VALUE <= 2)))")
    );

    /**
     * The domain <code>object_key_t</code>.
     */
    public static final Domain<String> OBJECT_KEY_T = Internal.createDomain(
          schema()
        , DSL.name("object_key_t")
        , SQLDataType.VARCHAR(1024).nullable(false)
    );

    /**
     * The domain <code>offset_nullable_t</code>.
     */
    public static final Domain<Long> OFFSET_NULLABLE_T = Internal.createDomain(
          schema()
        , DSL.name("offset_nullable_t")
        , SQLDataType.BIGINT
        , Internal.createCheck(null, null, "CHECK (((VALUE IS NULL) OR (VALUE >= 0)))")
    );

    /**
     * The domain <code>offset_t</code>.
     */
    public static final Domain<Long> OFFSET_T = Internal.createDomain(
          schema()
        , DSL.name("offset_t")
        , SQLDataType.BIGINT
        , Internal.createCheck(null, null, "CHECK ((VALUE IS NOT NULL))")
    );

    /**
     * The domain <code>offset_with_minus_one_t</code>.
     */
    public static final Domain<Long> OFFSET_WITH_MINUS_ONE_T = Internal.createDomain(
          schema()
        , DSL.name("offset_with_minus_one_t")
        , SQLDataType.BIGINT
        , Internal.createCheck(null, null, "CHECK (((VALUE IS NOT NULL) AND (VALUE >= '-1'::integer)))")
    );

    /**
     * The domain <code>partition_t</code>.
     */
    public static final Domain<Integer> PARTITION_T = Internal.createDomain(
          schema()
        , DSL.name("partition_t")
        , SQLDataType.INTEGER.nullable(false)
        , Internal.createCheck(null, null, "CHECK ((VALUE >= 0))")
    );

    /**
     * The domain <code>producer_epoch_t</code>.
     */
    public static final Domain<Short> PRODUCER_EPOCH_T = Internal.createDomain(
          schema()
        , DSL.name("producer_epoch_t")
        , SQLDataType.SMALLINT.nullable(false)
        , Internal.createCheck(null, null, "CHECK ((VALUE >= '-1'::integer))")
    );

    /**
     * The domain <code>producer_id_t</code>.
     */
    public static final Domain<Long> PRODUCER_ID_T = Internal.createDomain(
          schema()
        , DSL.name("producer_id_t")
        , SQLDataType.BIGINT.nullable(false)
        , Internal.createCheck(null, null, "CHECK ((VALUE >= '-1'::integer))")
    );

    /**
     * The domain <code>sequence_t</code>.
     */
    public static final Domain<Integer> SEQUENCE_T = Internal.createDomain(
          schema()
        , DSL.name("sequence_t")
        , SQLDataType.INTEGER.nullable(false)
        , Internal.createCheck(null, null, "CHECK ((VALUE >= '-1'::integer))")
    );

    /**
     * The domain <code>timestamp_t</code>.
     */
    public static final Domain<Long> TIMESTAMP_T = Internal.createDomain(
          schema()
        , DSL.name("timestamp_t")
        , SQLDataType.BIGINT.nullable(false)
        , Internal.createCheck(null, null, "CHECK ((VALUE >= '-5'::integer))")
    );

    /**
     * The domain <code>timestamp_type_t</code>.
     */
    public static final Domain<Short> TIMESTAMP_TYPE_T = Internal.createDomain(
          schema()
        , DSL.name("timestamp_type_t")
        , SQLDataType.SMALLINT.nullable(false)
        , Internal.createCheck(null, null, "CHECK (((VALUE >= '-1'::integer) AND (VALUE <= 1)))")
    );

    /**
     * The domain <code>topic_id_t</code>.
     */
    public static final Domain<UUID> TOPIC_ID_T = Internal.createDomain(
          schema()
        , DSL.name("topic_id_t")
        , SQLDataType.UUID.nullable(false)
    );

    /**
     * The domain <code>topic_name_t</code>.
     */
    public static final Domain<String> TOPIC_NAME_T = Internal.createDomain(
          schema()
        , DSL.name("topic_name_t")
        , SQLDataType.VARCHAR(255).nullable(false)
    );

    private static final Schema schema() {
        return new LazySchema(DSL.name(""), DSL.comment(""), () -> DefaultSchema.DEFAULT_SCHEMA);
    }
}
