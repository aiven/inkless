/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.FileMergeWorkItems.FileMergeWorkItemsPath;
import org.jooq.generated.tables.Files.FilesPath;
import org.jooq.generated.tables.records.FileMergeWorkItemFilesRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FileMergeWorkItemFiles extends TableImpl<FileMergeWorkItemFilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>file_merge_work_item_files</code>
     */
    public static final FileMergeWorkItemFiles FILE_MERGE_WORK_ITEM_FILES = new FileMergeWorkItemFiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileMergeWorkItemFilesRecord> getRecordType() {
        return FileMergeWorkItemFilesRecord.class;
    }

    /**
     * The column <code>file_merge_work_item_files.work_item_id</code>.
     */
    public final TableField<FileMergeWorkItemFilesRecord, Long> WORK_ITEM_ID = createField(DSL.name("work_item_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>file_merge_work_item_files.file_id</code>.
     */
    public final TableField<FileMergeWorkItemFilesRecord, Long> FILE_ID = createField(DSL.name("file_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private FileMergeWorkItemFiles(Name alias, Table<FileMergeWorkItemFilesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FileMergeWorkItemFiles(Name alias, Table<FileMergeWorkItemFilesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>file_merge_work_item_files</code> table reference
     */
    public FileMergeWorkItemFiles(String alias) {
        this(DSL.name(alias), FILE_MERGE_WORK_ITEM_FILES);
    }

    /**
     * Create an aliased <code>file_merge_work_item_files</code> table reference
     */
    public FileMergeWorkItemFiles(Name alias) {
        this(alias, FILE_MERGE_WORK_ITEM_FILES);
    }

    /**
     * Create a <code>file_merge_work_item_files</code> table reference
     */
    public FileMergeWorkItemFiles() {
        this(DSL.name("file_merge_work_item_files"), null);
    }

    public <O extends Record> FileMergeWorkItemFiles(Table<O> path, ForeignKey<O, FileMergeWorkItemFilesRecord> childPath, InverseForeignKey<O, FileMergeWorkItemFilesRecord> parentPath) {
        super(path, childPath, parentPath, FILE_MERGE_WORK_ITEM_FILES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.19.17",
            "schema version:7"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class FileMergeWorkItemFilesPath extends FileMergeWorkItemFiles implements Path<FileMergeWorkItemFilesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FileMergeWorkItemFilesPath(Table<O> path, ForeignKey<O, FileMergeWorkItemFilesRecord> childPath, InverseForeignKey<O, FileMergeWorkItemFilesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FileMergeWorkItemFilesPath(Name alias, Table<FileMergeWorkItemFilesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FileMergeWorkItemFilesPath as(String alias) {
            return new FileMergeWorkItemFilesPath(DSL.name(alias), this);
        }

        @Override
        public FileMergeWorkItemFilesPath as(Name alias) {
            return new FileMergeWorkItemFilesPath(alias, this);
        }

        @Override
        public FileMergeWorkItemFilesPath as(Table<?> alias) {
            return new FileMergeWorkItemFilesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FILE_MERGE_WORK_ITEM_FILES_BY_FILE);
    }

    @Override
    public UniqueKey<FileMergeWorkItemFilesRecord> getPrimaryKey() {
        return Keys.FILE_MERGE_WORK_ITEM_FILES_PKEY;
    }

    @Override
    public List<ForeignKey<FileMergeWorkItemFilesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FILE_MERGE_WORK_ITEM_FILES__FILE_MERGE_WORK_ITEM_FILES_FILE_ID_FKEY, Keys.FILE_MERGE_WORK_ITEM_FILES__FILE_MERGE_WORK_ITEM_FILES_WORK_ITEM_ID_FKEY);
    }

    private transient FilesPath _files;

    /**
     * Get the implicit join path to the <code>public.files</code> table.
     */
    public FilesPath files() {
        if (_files == null)
            _files = new FilesPath(this, Keys.FILE_MERGE_WORK_ITEM_FILES__FILE_MERGE_WORK_ITEM_FILES_FILE_ID_FKEY, null);

        return _files;
    }

    private transient FileMergeWorkItemsPath _fileMergeWorkItems;

    /**
     * Get the implicit join path to the
     * <code>public.file_merge_work_items</code> table.
     */
    public FileMergeWorkItemsPath fileMergeWorkItems() {
        if (_fileMergeWorkItems == null)
            _fileMergeWorkItems = new FileMergeWorkItemsPath(this, Keys.FILE_MERGE_WORK_ITEM_FILES__FILE_MERGE_WORK_ITEM_FILES_WORK_ITEM_ID_FKEY, null);

        return _fileMergeWorkItems;
    }

    @Override
    public FileMergeWorkItemFiles as(String alias) {
        return new FileMergeWorkItemFiles(DSL.name(alias), this);
    }

    @Override
    public FileMergeWorkItemFiles as(Name alias) {
        return new FileMergeWorkItemFiles(alias, this);
    }

    @Override
    public FileMergeWorkItemFiles as(Table<?> alias) {
        return new FileMergeWorkItemFiles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FileMergeWorkItemFiles rename(String name) {
        return new FileMergeWorkItemFiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileMergeWorkItemFiles rename(Name name) {
        return new FileMergeWorkItemFiles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileMergeWorkItemFiles rename(Table<?> name) {
        return new FileMergeWorkItemFiles(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileMergeWorkItemFiles where(Condition condition) {
        return new FileMergeWorkItemFiles(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileMergeWorkItemFiles where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileMergeWorkItemFiles where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileMergeWorkItemFiles where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileMergeWorkItemFiles where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileMergeWorkItemFiles where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileMergeWorkItemFiles where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileMergeWorkItemFiles where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileMergeWorkItemFiles whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileMergeWorkItemFiles whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
