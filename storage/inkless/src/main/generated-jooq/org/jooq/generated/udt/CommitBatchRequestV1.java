/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.udt;


import io.aiven.inkless.control_plane.postgres.converters.ShortToTimestampTypeConverter;
import io.aiven.inkless.control_plane.postgres.converters.UUIDtoUuidConverter;

import javax.annotation.processing.Generated;

import org.apache.kafka.common.Uuid;
import org.apache.kafka.common.record.TimestampType;
import org.jooq.Schema;
import org.jooq.UDTField;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Domains;
import org.jooq.generated.udt.records.CommitBatchRequestV1Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.SchemaImpl;
import org.jooq.impl.UDTImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommitBatchRequestV1 extends UDTImpl<CommitBatchRequestV1Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>commit_batch_request_v1</code>
     */
    public static final CommitBatchRequestV1 COMMIT_BATCH_REQUEST_V1 = new CommitBatchRequestV1();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommitBatchRequestV1Record> getRecordType() {
        return CommitBatchRequestV1Record.class;
    }

    /**
     * The attribute <code>commit_batch_request_v1.magic</code>.
     */
    public static final UDTField<CommitBatchRequestV1Record, Short> MAGIC = createField(DSL.name("magic"), Domains.MAGIC_T.getDataType().nullable(false), COMMIT_BATCH_REQUEST_V1, "");

    /**
     * The attribute <code>commit_batch_request_v1.topic_id</code>.
     */
    public static final UDTField<CommitBatchRequestV1Record, Uuid> TOPIC_ID = createField(DSL.name("topic_id"), SQLDataType.UUID.nullable(false), COMMIT_BATCH_REQUEST_V1, "", new UUIDtoUuidConverter());

    /**
     * The attribute <code>commit_batch_request_v1.partition</code>.
     */
    public static final UDTField<CommitBatchRequestV1Record, Integer> PARTITION = createField(DSL.name("partition"), Domains.PARTITION_T.getDataType().nullable(false), COMMIT_BATCH_REQUEST_V1, "");

    /**
     * The attribute <code>commit_batch_request_v1.byte_offset</code>.
     */
    public static final UDTField<CommitBatchRequestV1Record, Long> BYTE_OFFSET = createField(DSL.name("byte_offset"), Domains.BYTE_OFFSET_T.getDataType().nullable(false), COMMIT_BATCH_REQUEST_V1, "");

    /**
     * The attribute <code>commit_batch_request_v1.byte_size</code>.
     */
    public static final UDTField<CommitBatchRequestV1Record, Long> BYTE_SIZE = createField(DSL.name("byte_size"), Domains.BYTE_SIZE_T.getDataType().nullable(false), COMMIT_BATCH_REQUEST_V1, "");

    /**
     * The attribute <code>commit_batch_request_v1.base_offset</code>.
     */
    public static final UDTField<CommitBatchRequestV1Record, Long> BASE_OFFSET = createField(DSL.name("base_offset"), Domains.OFFSET_T.getDataType(), COMMIT_BATCH_REQUEST_V1, "");

    /**
     * The attribute <code>commit_batch_request_v1.last_offset</code>.
     */
    public static final UDTField<CommitBatchRequestV1Record, Long> LAST_OFFSET = createField(DSL.name("last_offset"), Domains.OFFSET_T.getDataType(), COMMIT_BATCH_REQUEST_V1, "");

    /**
     * The attribute <code>commit_batch_request_v1.timestamp_type</code>.
     */
    public static final UDTField<CommitBatchRequestV1Record, TimestampType> TIMESTAMP_TYPE = createField(DSL.name("timestamp_type"), Domains.TIMESTAMP_TYPE_T.getDataType().nullable(false), COMMIT_BATCH_REQUEST_V1, "", new ShortToTimestampTypeConverter());

    /**
     * The attribute <code>commit_batch_request_v1.batch_max_timestamp</code>.
     */
    public static final UDTField<CommitBatchRequestV1Record, Long> BATCH_MAX_TIMESTAMP = createField(DSL.name("batch_max_timestamp"), Domains.TIMESTAMP_T.getDataType().nullable(false), COMMIT_BATCH_REQUEST_V1, "");

    /**
     * The attribute <code>commit_batch_request_v1.producer_id</code>.
     */
    public static final UDTField<CommitBatchRequestV1Record, Long> PRODUCER_ID = createField(DSL.name("producer_id"), Domains.PRODUCER_ID_T.getDataType().nullable(false), COMMIT_BATCH_REQUEST_V1, "");

    /**
     * The attribute <code>commit_batch_request_v1.producer_epoch</code>.
     */
    public static final UDTField<CommitBatchRequestV1Record, Short> PRODUCER_EPOCH = createField(DSL.name("producer_epoch"), Domains.PRODUCER_EPOCH_T.getDataType().nullable(false), COMMIT_BATCH_REQUEST_V1, "");

    /**
     * The attribute <code>commit_batch_request_v1.base_sequence</code>.
     */
    public static final UDTField<CommitBatchRequestV1Record, Integer> BASE_SEQUENCE = createField(DSL.name("base_sequence"), Domains.SEQUENCE_T.getDataType().nullable(false), COMMIT_BATCH_REQUEST_V1, "");

    /**
     * The attribute <code>commit_batch_request_v1.last_sequence</code>.
     */
    public static final UDTField<CommitBatchRequestV1Record, Integer> LAST_SEQUENCE = createField(DSL.name("last_sequence"), Domains.SEQUENCE_T.getDataType().nullable(false), COMMIT_BATCH_REQUEST_V1, "");

    /**
     * No further instances allowed
     */
    private CommitBatchRequestV1() {
        super(DSL.name("commit_batch_request_v1"), null, null, false);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA != null ? DefaultSchema.DEFAULT_SCHEMA : new SchemaImpl(DSL.name(""));
    }
}
