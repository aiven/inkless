/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import io.aiven.inkless.control_plane.FileReason;

import java.time.Instant;

import javax.annotation.processing.Generated;

import org.jooq.Record1;
import org.jooq.generated.enums.FileStateT;
import org.jooq.generated.tables.Files;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.17",
        "schema version:7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FilesRecord extends UpdatableRecordImpl<FilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>files.file_id</code>.
     */
    public void setFileId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>files.file_id</code>.
     */
    public Long getFileId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>files.object_key</code>.
     */
    public void setObjectKey(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>files.object_key</code>.
     */
    public String getObjectKey() {
        return (String) get(1);
    }

    /**
     * Setter for <code>files.format</code>.
     */
    public void setFormat(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>files.format</code>.
     */
    public Short getFormat() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>files.reason</code>.
     */
    public void setReason(FileReason value) {
        set(3, value);
    }

    /**
     * Getter for <code>files.reason</code>.
     */
    public FileReason getReason() {
        return (FileReason) get(3);
    }

    /**
     * Setter for <code>files.state</code>.
     */
    public void setState(FileStateT value) {
        set(4, value);
    }

    /**
     * Getter for <code>files.state</code>.
     */
    public FileStateT getState() {
        return (FileStateT) get(4);
    }

    /**
     * Setter for <code>files.uploader_broker_id</code>.
     */
    public void setUploaderBrokerId(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>files.uploader_broker_id</code>.
     */
    public Integer getUploaderBrokerId() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>files.committed_at</code>.
     */
    public void setCommittedAt(Instant value) {
        set(6, value);
    }

    /**
     * Getter for <code>files.committed_at</code>.
     */
    public Instant getCommittedAt() {
        return (Instant) get(6);
    }

    /**
     * Setter for <code>files.marked_for_deletion_at</code>.
     */
    public void setMarkedForDeletionAt(Instant value) {
        set(7, value);
    }

    /**
     * Getter for <code>files.marked_for_deletion_at</code>.
     */
    public Instant getMarkedForDeletionAt() {
        return (Instant) get(7);
    }

    /**
     * Setter for <code>files.size</code>.
     */
    public void setSize(Long value) {
        set(8, value);
    }

    /**
     * Getter for <code>files.size</code>.
     */
    public Long getSize() {
        return (Long) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FilesRecord
     */
    public FilesRecord() {
        super(Files.FILES);
    }

    /**
     * Create a detached, initialised FilesRecord
     */
    public FilesRecord(Long fileId, String objectKey, Short format, FileReason reason, FileStateT state, Integer uploaderBrokerId, Instant committedAt, Instant markedForDeletionAt, Long size) {
        super(Files.FILES);

        setFileId(fileId);
        setObjectKey(objectKey);
        setFormat(format);
        setReason(reason);
        setState(state);
        setUploaderBrokerId(uploaderBrokerId);
        setCommittedAt(committedAt);
        setMarkedForDeletionAt(markedForDeletionAt);
        setSize(size);
        resetChangedOnNotNull();
    }
}
