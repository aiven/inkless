services:
  broker1: &base-broker
    image: us-central1-docker.pkg.dev/molten-verve-216720/aiven-repository/kafka:4.1.0-inkless-SNAPSHOT
    restart: unless-stopped
    environment: &base-broker-env
      CLUSTER_ID: "4L6g3nShT-eMCtK--X86sw"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 1
      KAFKA_BROKER_RACK: "az1"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker1:29090,2@broker2:29090,3@broker3:29090"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_LISTENERS: "CONTROLLER://:29090,PLAINTEXT://:9092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://broker1:9092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2

      # Inkless
      KAFKA_INKLESS_STORAGE_SYSTEM_ENABLE: "true"
      KAFKA_LOG_INKLESS_ENABLE: "true"
      KAFKA_INKLESS_CONSUME_CACHE_MAX_COUNT: "100"

      ## Postgresql Control Plane
      KAFKA_INKLESS_CONTROL_PLANE_CLASS: "io.aiven.inkless.control_plane.postgres.PostgresControlPlane"
      KAFKA_INKLESS_CONTROL_PLANE_CONNECTION_STRING: "jdbc:postgresql://postgres:5432/inkless"
      KAFKA_INKLESS_CONTROL_PLANE_USERNAME: "admin"
      KAFKA_INKLESS_CONTROL_PLANE_PASSWORD: "admin"

      ## S3 storage
      KAFKA_INKLESS_STORAGE_BACKEND_CLASS: "io.aiven.inkless.storage_backend.s3.S3Storage"
      KAFKA_INKLESS_STORAGE_S3_PATH_STYLE_ACCESS_ENABLED: "true"
      KAFKA_INKLESS_STORAGE_S3_BUCKET_NAME: "inkless"
      KAFKA_INKLESS_STORAGE_S3_REGION: "us-east-1"
      KAFKA_INKLESS_STORAGE_S3_ENDPOINT_URL: "http://storage:9000"
      KAFKA_INKLESS_STORAGE_AWS_ACCESS_KEY_ID: "minioadmin"
      KAFKA_INKLESS_STORAGE_AWS_SECRET_ACCESS_KEY: "minioadmin"
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server broker1:9092 --list"]
      interval: 5s
      timeout: 20s
      retries: 20
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cluster-net

  broker2:
    <<: *base-broker
    environment:
      <<: *base-broker-env
      KAFKA_NODE_ID: 2
      KAFKA_BROKER_RACK: "az2"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://broker2:9092"

  broker3:
    <<: *base-broker
    environment:
      <<: *base-broker-env
      KAFKA_NODE_ID: 3
      KAFKA_BROKER_RACK: "az3"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://broker3:9092"

  storage:
    image: quay.io/minio/minio:RELEASE.2025-07-23T15-54-02Z
    command: server /data --console-address ":9001"
    post_start:
      - command: >
          /bin/sh -c "
          until /usr/bin/mc alias set local http://storage:9000 minioadmin minioadmin; do
          echo 'Waiting for Minio...';
          sleep 5;
          done;
          /usr/bin/mc mb local/inkless;
          exit 0;
          "
    networks:
      - cluster-net

  postgres:
    image: docker.io/library/postgres:17.2
    environment:
      POSTGRES_DB: "inkless"
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "admin"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname=inkless -U admin"]
      interval: 5s
      timeout: 20s
      retries: 20
    networks:
      - cluster-net

  workload:
    image: us-central1-docker.pkg.dev/molten-verve-216720/aiven-repository/inkless-workload
    volumes:
      - ./workload-config.json:/app/workload-config.json
    networks:
      - cluster-net
    depends_on:
      broker1:
        condition: service_healthy
      storage:
        condition: service_started
      postgres:
        condition: service_healthy

networks:
  cluster-net:
